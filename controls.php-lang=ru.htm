<!--registration controls-->


<!--//-->

<!DOCTYPE html>

<html>
  <head>
    <title>Пользовательские элементы - WebForms.PHP</title>
		<meta name="viewport" content="width=device-width" />
		<link rel="stylesheet" href="Content/css/compiled.min.css" />
		<script src="Scripts/compiled.min.js" type="text/javascript"></script>
		<!--block of content "Head"-->
		
		<!--//-->
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8" /><meta name="generator" content="PHP WebForms Engine by Aleksey Nemiro // v.3.1 // http://aleksey.nemiro.ru" /><meta name="DESCRIPTION" content="Template engine, HTML components and the beginnings of Framework for web sites creation in PHP." /><meta name="KEYWORDS" content="WebForms, PHP, Documentation, Manual, Guide, Demo" /><meta name="AUTHOR" content="Aleksey Nemiro (VVO-JOK-LED)" /><meta name="ROBOTS" content="ALL" /></head>
	<body>
		<!--Header control-->
		<header id="header">
	<nav class="navbar navbar-default"> <!-- navbar-fixed-top -->
		<div class="container">
			<div class="navbar-header">
				<button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#nav">
					<span class="icon-bar"></span>
					<span class="icon-bar"></span>
					<span class="icon-bar"></span>                        
				</button>
				<a href="index-ru.htm" class="navbar-brand">WebForms.PHP</a>
			</div>
			<div id="nav" class="collapse navbar-collapse">
				<ul class="nav navbar-nav">
					<li><a href="index-ru.htm#GettingStarted"><span class="glyphicon glyphicon-save"></span> Быстрый старт</a></li>
					<li><a href="templates.php-lang=ru.htm"><span class="glyphicon glyphicon-picture"></span> Шаблоны</a></li>
					<li><a href="pages.php-lang=ru.htm"><span class="glyphicon glyphicon-file"></span> Страницы</a></li>
					<li><a href="controls.php-lang=ru.htm"><span class="glyphicon glyphicon-cog"></span> Контролы</a></li>
					<li><a href="elements.php-lang=ru.htm"><span class="glyphicon glyphicon-list-alt"></span> Элементы HTML</a></li>
					<li><a href="localization.php-lang=ru.htm"><span class="glyphicon glyphicon-globe"></span> Локализация</a></li>
				</ul>
				<ul class="nav navbar-nav navbar-right">
					<li><a href="controls.php-lang=ru.htm"><img src="Content/images/ru.png" alt="RU" title="" width="22" height="22" /></a></li>
					<li><a href="controls.php.htm"><img src="Content/images/en.png" alt="EN" title="" width="22" height="22" /></a></li>
				</ul>
			</div>
		</div>
	</nav>
		<div class="jumbotron"> <!-- style="padding-top:72px;" -->
		<div class="container">
			<h1>Пользовательские элементы</h1>
			<p>Может показаться, что пользовательские элементы управления являются обычными включаемыми файлами, но это не так. В пользовательских элементах можно размещать другие элементы. Пользовательские элементы могут иметь свойства и обработчики событий. Объекты пользовательских элементов можно легко описать в разметке.</p>
		</div>
	</div>
	</header>
		<!--//-->


		<div class="container">
			<!--block of content "MainContent"-->
						<h2>Введение</h2>
			<p>Пользовательские элементы могут играть роль простых вставок (include), либо состоять из класса и разметки <strong>HTML</strong>.</p>
			<p>В пользовательских элементах нельзя использовать директивы, и они не могут иметь собственных файлов локализации.</p>
			<p>Пользовательские элементы могут содержать любой код, включая код <strong>PHP</strong>.</p>
			<p>Каждый размещенный на странице экземпляр пользовательского элемента управления может иметь свои, уникальные, значения свойств.</p>
			<p>Свойства пользовательских элементов могут ссылаться на другие классы и легко описываются в коде <strong>HTML</strong>.</p>
			<p>Пользовательские элементы могут размещаться в шаблонах и страницах контента, без каких-либо ограничений.</p>

			<h3 id="contents">Содержание</h3>
			<ul>
				<li><a href="#registration">Регистрация и размещение элементов</a></li>
				<li><a href="#include">Пользовательские элементы, как замена включаемым файлам</a></li>
				<li><a href="#object">Объектная модель</a></li>
				<li>
					<a href="#control">Класс Control</a>
					<ul>
						<li><a href="#properties">Свойства</a></li>
						<li>
							<a href="#events">Свойства</a>
							<ul>
								<li><a href="#load">Load</a></li>
								<li><a href="#loadСomplete">LoadComplete</a></li>
							</ul>
						</li>
					</ul>
				</li>
				<li><a href="#localization">Локализация</a></li>
			</ul>

			<h2 id="registration">Регистрация и размещение элементов</h2>
			<p>Перед размещением элементов на странице, их нужно зарегистрировать. Это реализуется при помощи директивы <a href="pages.php-lang=ru.htm#directive-register">#Register</a>.</p>
			<p>Регистрировать следует только те элементы, которые потребуются на конкретной странице.</p>
			<p>В следующем примере показана регистрация на странице элемента <code>Message</code>.</p>
			<pre><code class="html">&lt;?#Register Src="~/Controls/Message.php" TagPrefix="php" TagName="Message"?&gt;</code></pre>
			<p>В параметре <code>Src</code> указывается путь к основному файлу элемента. Параметры <code>TagPrefix</code> и <code>TagName</code> содержат имя для размещения элемента на странице.</p>
			<p>В следующем примере показано размещение нескольких экземпляров зарегистрированного элемента <code>Message</code>.</p>
			<pre><code class="html">&lt;php:Message&gt;Привет, мир! Это сообщение #1!&lt;/php:Message&gt;
&lt;php:Message&gt;Это сообщение #2!&lt;/php:Message&gt;
&lt;php:Message&gt;Таких сообщений может быть сколько угодно!&lt;/php:Message&gt;</code></pre>
			<p>Как правило, <code>TagPrefix</code> имеет значение <strong>php</strong>, а <code>TagName</code> соответствует имени элемента, но это не является обязательным требованием.</p>
			<p>В следующем примере показано использование нестандартных значений <code>TagPrefix</code> и <code>TagName</code>.</p>
			<pre><code class="html">&lt;?#Register Src="~/Controls/Message.php" TagPrefix="my" TagName="Information"?&gt;

&lt;my:Information&gt;Привет, мир!&lt;/my:Information&gt;
			     </code></pre>
			<p>На одной странице можно размещать неограниченное число элементов с различными значениями свойств.</p>

			<h2 id="include">Пользовательские элементы, как замена включаемым файлам</h2>
			<p>Пользовательские элементы могут быть заменой обычным включаемым файлам (<strong>include</strong>).</p>
			<p>В следующем примере показан простой элемент управления.</p>
			<pre><code class="html">Это простой элемент управления, по сути просто вставка (include).
&lt;br /&gt;&lt;br /&gt;
&lt;?="Элемент может содержать любой код и теги."?&gt;</code></pre>

			<p>Но несмотря на то, что элемент управления не имеет явного класса, класс для него все равно создается. Это позволяет использовать свойства и передавать в экземпляр элемента любые текстовые значения для этих свойств.</p>
			<p>В следующем примере показан исходный код элемента <code>Panel</code>, который состоит лишь из разметки с блоками серверного кода и не имеет явного класса. Элемент ожидает два анонимных свойства <code>Title</code> и <code>Content</code>. Значения для этих свойств можно передать при размещении элемента на странице и они будут обработаны, как явно определенные свойства.</p>
			<ul class="nav nav-tabs" role="tablist">
	<li class="active"><a href="#Page_TabControl1_Control" aria-controls="Page_TabControl1_Control" role="tab" data-toggle="tab">Panel.php</a></li>
	<li class=""><a href="#Page_TabControl1_Place" aria-controls="Page_TabControl1_Place" role="tab" data-toggle="tab">Размещение на странице</a></li>
	<li class=""><a href="#Page_TabControl1_Result" aria-controls="Page_TabControl1_Result" role="tab" data-toggle="tab">Результат</a></li>
</ul>

<div class="tab-content">
	<div role="tabpanel" class="tab-pane active" id="Page_TabControl1_Control">						<pre><code class="html">&lt;div class="panel panel-default"&gt;
  &lt;?php if (isset($this-&gt;Title)) {?&gt;
  &lt;div class="panel-heading"&gt;&lt;?=$this-&gt;Title?&gt;&lt;/div&gt;
  &lt;?php } ?&gt;
  &lt;div class="panel-body"&gt;
    &lt;?=$this-&gt;Content?&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
					</div>
	<div role="tabpanel" class="tab-pane" id="Page_TabControl1_Place">						<pre><code class="php">&lt;?#Register Src="~/Controls/Panel.php" TagPrefix="php" TagName="Panel"?&gt;

&lt;php:Panel Title="Заголовок" Content="Привет, мир!" /&gt;</code></pre>
					</div>
	<div role="tabpanel" class="tab-pane" id="Page_TabControl1_Result">
						<div class="panel panel-default">
		<div class="panel-heading">Заголовок</div>
	  <div class="panel-body">
    Привет, мир!  </div>
</div>
					</div>
</div>

			<h2 id="object">Объектная модель</h2>
			<p>Как и в случае со страницами контента, при объектной модели, в основном файле элемента управления размещается класс, а в файле с расширением <strong>.html.php</strong> - разметка.</p>
			<p>В следующем примере показан пользовательский элемент <code>Message</code>, который используется на данном сайте. Класс элемента описан в файле <strong>Message.php</strong>, а разметка - в файле <strong>Message.html.php</strong>.</p>
			<ul class="nav nav-tabs" role="tablist">
	<li class="active"><a href="#Page_TabControl2_Design" aria-controls="Page_TabControl2_Design" role="tab" data-toggle="tab">Message.html.php</a></li>
	<li class=""><a href="#Page_TabControl2_Class" aria-controls="Page_TabControl2_Class" role="tab" data-toggle="tab">Message.php</a></li>
</ul>

<div class="tab-content">
	<div role="tabpanel" class="tab-pane active" id="Page_TabControl2_Design">						<pre><code class="html">&lt;div class="&lt;?=$this-&gt;GetCssClass()?&gt;"&gt;
  &lt;?=($this-&gt;ShowIcon ? $this-&gt;GetIcon() : '')?&gt;
  &lt;?=$this-&gt;Content?&gt;
&lt;/div&gt;</code></pre>
					</div>
	<div role="tabpanel" class="tab-pane" id="Page_TabControl2_Class">						<pre><code class="php">&lt;?php
/**
 * Represents message control.
 */
class Message extends Nemiro\UI\Control
{

  /**
   * The message text.
   * 
   * @var string
   */
  public $Content = '';

  /**
   * Gets or sets the message type. Allowed: Danger (default), Warning, Info, Success.
   * @var mixed
   */
  public $Type = 'Danger';

  /**
   * 
   * @var bool
   */
  public $ShowIcon = true;

  /**
   * Returns css class for the message block.
   * 
   * @return string
   */
  function GetCssClass()
  {
    switch (strtolower($this-&gt;Type))
    {
      case 'warning':
        return 'alert alert-warning';

      case 'info':
      case 'question':
        return 'alert alert-info';
              
      case 'success':
        return 'alert alert-success';

      default:
        return 'alert alert-danger';
    }
  }

  /**
   * Returns icon for the message.
   * 
   * @return string
   */
  function GetIcon()
  {
    switch (strtolower($this-&gt;Type))
    {
      case 'warning':
        return '&lt;span class="glyphicon glyphicon-warning-sign"&gt;&lt;/span&gt; ';

      case 'info':
        return '&lt;span class="glyphicon glyphicon-info-sign"&gt;&lt;/span&gt; ';

      case 'question':
        return '&lt;span class="glyphicon glyphicon-question-sign"&gt;&lt;/span&gt; ';
      
      case 'success':
        return '&lt;span class="glyphicon glyphicon-ok-sign"&gt;&lt;/span&gt; ';

      default:
        return '&lt;span class="glyphicon glyphicon-remove-sign"&gt;&lt;/span&gt; ';
    }
  }
}
?&gt;</code></pre>
					</div>
</div>

			<p>Любому публичном свойству класса элемента управления можно установить значение при помощи кода <strong>HTML</strong>, либо программно в обработчике <a href="pages.php-lang=ru.htm#load">события загрузки страницы</a>.</p>
			<p>При программной работе, доступ к определенному элементу осуществляется по идентификатору элемента. По умолчанию, каждому элементу назначается идентификатор автоматически и это может быть не очень удобно. Идентификатор элементу управления можно указать вручную, для это используется свойство <code>ID</code>.</p>
			<div class="alert alert-warning">
	<span class="glyphicon glyphicon-warning-sign"></span> 	Учитывайте, что уникальность идентификаторов в текущей реализации движка не проверяется!</div>
			<p>В следующем примере показано явное определение идентификаторов у двух экземпляров элемента <code>Message</code>.</p>
			<pre><code class="html">&lt;php:Message ID="MyMessage1"&gt;Сообщение #1&lt;/php:Message&gt;
&lt;php:Message ID="AnyMessage"&gt;Другое сообщение&lt;/php:Message&gt;</code></pre>
			<p>В обработчике <a href="pages.php-lang=ru.htm#load">события загрузки страницы</a>, при необходимости, можно программно указать текст для этих элементов.</p>
			<pre><code class="php">function Load()
{
  $this->Controls['MyMessage1']->Content = 'Текст этого сообщения установлен программно.';
  $this->Controls['AnyMessage']->Content = 'И для этого сообщения, текст тоже установлен программно.';
}</code></pre>
			<p>Свойства элементов управления могут содержать ссылки на другие элементы или представлять коллекции. И всё это можно описать в разметке!</p>
			<p>Например, на этом сайте используется пользовательский элемент управления <code>TabControl</code>, который состоит из: файла разметки <strong>TabControl.html.php</strong>, класса <code>TabControl</code> и класса <code>TabItem</code>. Класс <code>TabItem</code> представляет вкладку <code>TabControl</code> и на уровне <code>TabControl</code> представлен в виде массива <code>Items</code>.</p>
			<ul class="nav nav-tabs" role="tablist">
	<li class="active"><a href="#Page_TabControl3_TabControl" aria-controls="Page_TabControl3_TabControl" role="tab" data-toggle="tab">TabControl.php</a></li>
	<li class=""><a href="#Page_TabControl3_TabItem" aria-controls="Page_TabControl3_TabItem" role="tab" data-toggle="tab">TabItem.php</a></li>
	<li class=""><a href="#Page_TabControl3_TabControlHtml" aria-controls="Page_TabControl3_TabControlHtml" role="tab" data-toggle="tab">TabControl.html.php</a></li>
</ul>

<div class="tab-content">
	<div role="tabpanel" class="tab-pane active" id="Page_TabControl3_TabControl">						<pre><code class="php">&lt;?php
require_once 'TabItem.php';

/**
 * Represents TabControl.
 */
class TabControl extends Nemiro\UI\Control
{

  /**
   * List of tabs.
   * 
   * @var TabItem[]
   */
  public $Items = array();

}
?&gt;</code></pre>
					</div>
	<div role="tabpanel" class="tab-pane" id="Page_TabControl3_TabItem">						<pre><code class="php">&lt;?php
class TabItem
{

  public $Key = '';

  public $Title = '';

  public $Content = '';

}
?&gt;</code></pre>
					</div>
	<div role="tabpanel" class="tab-pane" id="Page_TabControl3_TabControlHtml">						<pre><code class="html">&lt;ul class="nav nav-tabs" role="tablist"&gt;
&lt;?php
  $i = 0;
  foreach ($this-&gt;Items as $item)
  {
?&gt;
  &lt;li class="&lt;?=($i == 0 ? 'active' : '')?&gt;"&gt;&lt;a href="#&lt;?=sprintf('%s_%s', $this-&gt;ID, $item-&gt;Key)?&gt;" aria-controls="&lt;?=sprintf('%s_%s', $this-&gt;ID, $item-&gt;Key)?&gt;" role="tab" data-toggle="tab"&gt;&lt;?=$item-&gt;Title?&gt;&lt;/a&gt;&lt;/li&gt;
&lt;?php
    $i++;
  }
?&gt;
&lt;/ul&gt;

&lt;div class="tab-content"&gt;
&lt;?php
  $i = 0;
  foreach ($this-&gt;Items as $item)
  {
?&gt;
  &lt;div role="tabpanel" class="&lt;?=($i == 0 ? 'tab-pane active' : 'tab-pane')?&gt;" id="&lt;?=sprintf('%s_%s', $this-&gt;ID, $item-&gt;Key)?&gt;"&gt;&lt;?=$item-&gt;Content?&gt;&lt;/div&gt;
&lt;?php
    $i++;
  }
?&gt;
&lt;/div&gt;</code></pre>
					</div>
</div>
			<p>Поскольку свойство <code>Items</code> является коллекцией, т.е. может иметь вложенные элементы, то в коде <strong>HTML</strong> оно должно быть представлено в виде тега <code>Items</code> с вложенными экземплярами <code>TabItem</code>.</p>
			<p>В следующем примере показан вариант размещения экземпляра <code>TabControl</code> на странице.</p>
			<pre><code class="html">&lt;php:TabControl&gt;
  &lt;php:Items&gt;
    &lt;php:TabItem Key="Item1" Title="Вкладка #1"&gt;
      Содержимое вкладки #1
    &lt;/php:TabItem&gt;
    &lt;php:TabItem Key="Item2" Title="Вкладка #2"&gt;
      Содержимое вкладки #2
    &lt;/php:TabItem&gt;
    &lt;php:TabItem Key="Item3" Title="Вкладка #3"&gt;
      Содержимое вкладки #3
    &lt;/php:TabItem&gt;
  &lt;/php:Items&gt;
&lt;/php:TabControl&gt;</code></pre>

			<h2 id="control">Класс Control</h2>
			<p>Класс <code>\Nemiro\UI\Control</code> (далее <code>Control</code>) представляет пользовательский элемент управления.</p>
			<p>От класса <code>Control</code> должны наследоваться (<code>extends</code>) классы всех пользовательских элементов управления.</p>
			<p>Если у пользовательского элемента нет класса, то использует экземпляр класса <code>Control</code> по умолчанию, с ограниченными возможностями.</p>
			<p>В следующем фрагменте кода показан вариант наследования класса пользовательского элемента <code>Menu</code> от базового класса <code>Control</code>.</p>
			<pre><code class="php">&lt;?php
class Menu extends \Nemiro\UI\Control
{

}
?&gt;</code></pre>
			<h3 id="properties">Свойства</h3>
			<p>Класс <code>Control</code> имеет следующие публичные свойства.</p>
			<table class="table">
				<thead>
					<tr>
						<th>Свойство</th>
						<th><nobr>Тип значения</nobr></th>
						<th>Описание</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>DefaultValues</td>
						<td>Коллекция (ключ=значение)</td>
						<td>
							<strong>Только для чтения.</strong> Коллекция значений по умолчанию.<br />Используется для технических нужд.
						</td>
					</tr>
					<tr>
						<td>Source</td>
						<td>Строка</td>
						<td>
							<strong>Только для чтения.</strong> Путь к основному файлу элемента управления.
						</td>
					</tr>
					<tr>
						<td>TagPrefix</td>
						<td>Строка</td>
						<td>
							<strong>Только для чтения.</strong> Префикс имени элемента управления.
						</td>
					</tr>
					<tr>
						<td>TagName</td>
						<td>Строка</td>
						<td>
							<strong>Только для чтения.</strong> Имя элемента управления.
						</td>
					</tr>
					<tr>
						<td>Name</td>
						<td>Строка</td>
						<td>
							<strong>Только для чтения.</strong> Имя элемента управления с учетом префикса.
						</td>
					</tr>
					<tr>
						<td>Parent</td>
						<td>Объект</td>
						<td>
							<strong>Только для чтения.</strong> Ссылка на родителя.
						</td>
					</tr>
					<tr>
						<td>Body</td>
						<td>Строка</td>
						<td>Тело элемента управления. Используется для вывода на страницу.<br />Значение может быть переопределено в обработчике события <a href="#loadComplete">LoadComplete</a>.</td>
					</tr>
				</tbody>
			</table>
			<p>Помимо этого, существует виртуальное свойство <code>Content</code>, которое может быть определено в классах-потомках.</p>
			<p>Свойство <code>Content</code> используется в качестве значения контента элемента, когда элемент в разметке содержит закрывающий тег.</p>
			<p>В следующем примере показан вариант явного и неявного указания значения свойству <code>Content</code>.</p>
			<pre><code class="html">&lt;php:Message&gt;Этот текст неявным образом будет помещен в свойство Content.&lt;/php:Message&gt;
&lt;php:Message Content="Этот текст явным образом помещен в свойство Content." /&gt;</code></pre>

			<h3 id="events">Свойства</h3>
			<p>У пользовательских элементов управления существует всего два события: <code>Load</code> и <code>LoadComplete</code>.</p>
			<p>Оба события происходят после события <a href="pages.php-lang=ru.htm#load">Load</a> и до возникновения события <a href="pages.php-lang=ru.htm#loadСomplete">LoadComplete</a> страницы.</p>
			<h4 id="load">Load</h4>
			<p>Событие <code>Load</code> происходит перед формированием данных пользовательского элемента управления для вывода.</p>
			<p>В обработчике этого события, теоретически, можно изменить <code>Source</code>, но лучше этого не делать.</p>
			<p>Обработчик <code>Load</code> может быть полезен для динамического изменения значений пользовательских свойств элемента управления.</p>
			<p>В следующем примере показано изменение значения свойства <code>Content</code> в упрощенной реализации элемента <code>Message</code>.</p>
			<pre><code class="php">&lt;?php
class Message extends \Nemiro\UI\Control
{

  public $Content = '';

  function Load()
  {
    $this->Content = 'Текст сообщения: '.$this->Content;
  }

}
?&gt;</code></pre>

			
			<h4 id="loadComplete">LoadComplete</h4>
			<p>Событие <code>LoadComplete</code> происходит после формирования данных.</p>
			<p>В обработчике этого события можно изменить значение свойства <code>Body</code>, которое содержит данные элемента для вывода на страницу.</p>
			<p>В следующем примере показано переопределение значения свойства <code>Body</code> в упрощенной реализации элемента <code>Message</code>.</p>
			<pre><code class="php">&lt;?php
class Message extends \Nemiro\UI\Control
{

  public $Content = '';

  function LoadComplete()
  {
    $this->Body = 'Сообщение: '.$this->Content;
  }

}
?&gt;</code></pre>

			<h2 id="localization">Локализация</h2>
			<p>Пользовательские элементы управления не имеют собственных файлов локализации и используют глобальные ресурсы (<strong>global.json</strong>), либо ресурсы страницы, на которой размещаются. Таким образом, один и тот же ключ ресурса локализации в пользовательских элементах управления может иметь разное значение на разных страницах сайта.</p>
			<p><a href="localization.php-lang=ru.htm">Подробнее о механизмах локализации</a>.</p>
		
			<!--//-->
		</div>

		<!--Footer control-->
		<footer class="text-center small">
	<hr />
	<!--a class="github-button" href="https://github.com/alekseynemiro" data-style="mega" data-count-href="alekseynemiro/followers" data-count-api="/users/alekseynemiro#followers" data-count-aria-label="# followers on GitHub" aria-label="Follow @alekseynemiro on GitHub">Follow @alekseynemiro</a-->
	<a class="github-button" href="https://github.com/alekseynemiro/WebForms.PHP" data-icon="octicon-star" data-style="mega" data-count-href="alekseynemiro/WebForms.PHP/stargazers" data-count-api="/repos/alekseynemiro/WebForms.PHP#stargazers_count" data-count-aria-label="# stargazers on GitHub" aria-label="Star alekseynemiro/WebForms.PHP on GitHub">Star</a>
	<a class="github-button" href="https://github.com/alekseynemiro/WebForms.PHP/fork" data-icon="octicon-repo-forked" data-style="mega" data-count-href="alekseynemiro/WebForms.PHP/network" data-count-api="/repos/alekseynemiro/WebForms.PHP#forks_count" data-count-aria-label="# forks on GitHub" aria-label="Fork alekseynemiro/WebForms.PHP on GitHub">Fork</a>
	<a class="github-button" href="https://github.com/alekseynemiro/WebForms.PHP/archive/master.zip" data-icon="octicon-cloud-download" data-style="mega" aria-label="Download alekseynemiro/WebForms.PHP on GitHub">Download</a>
	<br /><br />
	Code licensed under <a rel="license" href="http://www.apache.org/licenses/LICENSE-2.0">Apache License 2.0</a>, documentation under <a rel="license" href="http://creativecommons.org/licenses/by-nc/4.0/">CC BY-NC 4.0</a><br />
	Copyright © Aleksey Nemiro, 2015. All rights reserved.
	<br /><br />
</footer>

<script async defer id="github-bjs" src="https://buttons.github.io/buttons.js"></script>

<script type="text/javascript">
	$(document).ready(function () {
		$('pre code').each(function (i, block) {
			hljs.highlightBlock(block);
		});
	});
</script>

<script type="text/javascript">
	(function (i, s, o, g, r, a, m) {
		i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
			(i[r].q = i[r].q || []).push(arguments)
		}, i[r].l = 1 * new Date(); a = s.createElement(o),
		m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
	})(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

	ga('create', 'UA-4793481-9', 'auto');
	ga('send', 'pageview');

</script>
		<!--//-->
	</body>
</html>