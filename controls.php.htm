<!--registration controls-->


<!--//-->

<!DOCTYPE html>

<html>
  <head>
    <title>User controls - WebForms.PHP</title>
		<meta name="viewport" content="width=device-width" />
		<link rel="stylesheet" href="Content/css/compiled.min.css" />
		<script src="Scripts/compiled.min.js" type="text/javascript"></script>
		<!--block of content "Head"-->
		
		<!--//-->
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8" /><meta name="generator" content="PHP WebForms Engine by Aleksey Nemiro // v.3.1 // http://aleksey.nemiro.ru" /><meta name="DESCRIPTION" content="Template engine, HTML components and the beginnings of Framework for web sites creation in PHP." /><meta name="KEYWORDS" content="WebForms, PHP, Documentation, Manual, Guide, Demo" /><meta name="AUTHOR" content="Aleksey Nemiro (VVO-JOK-LED)" /><meta name="ROBOTS" content="ALL" /></head>
	<body>
		<!--Header control-->
		<header id="header">
	<nav class="navbar navbar-default"> <!-- navbar-fixed-top -->
		<div class="container">
			<div class="navbar-header">
				<button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#nav">
					<span class="icon-bar"></span>
					<span class="icon-bar"></span>
					<span class="icon-bar"></span>                        
				</button>
				<a href="index.htm" class="navbar-brand">WebForms.PHP</a>
			</div>
			<div id="nav" class="collapse navbar-collapse">
				<ul class="nav navbar-nav">
					<li><a href="index.htm#GettingStarted"><span class="glyphicon glyphicon-save"></span> Getting started</a></li>
					<li><a href="templates.php.htm"><span class="glyphicon glyphicon-picture"></span> Templates</a></li>
					<li><a href="pages.php.htm"><span class="glyphicon glyphicon-file"></span> Pages</a></li>
					<li><a href="controls.php.htm"><span class="glyphicon glyphicon-cog"></span> User Controls</a></li>
					<li><a href="elements.php.htm"><span class="glyphicon glyphicon-list-alt"></span> HTML Controls</a></li>
					<li><a href="localization.php.htm"><span class="glyphicon glyphicon-globe"></span> Localization</a></li>
				</ul>
				<ul class="nav navbar-nav navbar-right">
					<li><a href="controls.php-lang=ru.htm"><img src="Content/images/ru.png" alt="RU" title="" width="22" height="22" /></a></li>
					<li><a href="controls.php.htm"><img src="Content/images/en.png" alt="EN" title="" width="22" height="22" /></a></li>
				</ul>
			</div>
		</div>
	</nav>
		<div class="jumbotron"> <!-- style="padding-top:72px;" -->
		<div class="container">
			<h1>User controls</h1>
			<p>In the user controls can place other controls and elements. User controls can contain properties and event handlers. Objects of user controls can easily be described in the markup.</p>
		</div>
	</div>
	</header>
		<!--//-->


		<div class="container">
			<!--block of content "MainContent"-->
						<h2>Introduction</h2>
			<p>User controls can be usually includes files or represent complex objects.</p>
			<p>User controls can not use the directives, and they can not have their own localization files.</p>
			<p>User controls can contain any client-side and server-side code.</p>
			<p>Each instance of an user control can have its own, unique, property values.</p>
			<p>The properties of an user controls may refer to other classes and are easily described in the <strong>HTML</strong>.</p>
			<p>User controls can be placed in templates and content pages, without any restrictions.</p>

			<h3 id="contents">Contents</h3>
			<ul>
				<li><a href="#registration">Registration and placement of controls</a></li>
				<li><a href="#include">User controls as a replacement for include files</a></li>
				<li><a href="#object">Object model</a></li>
				<li>
					<a href="#control">Class Control</a>
					<ul>
						<li><a href="#properties">Properties</a></li>
						<li>
							<a href="#events">Events</a>
							<ul>
								<li><a href="#load">Load</a></li>
								<li><a href="#loadÐ¡omplete">LoadComplete</a></li>
							</ul>
						</li>
					</ul>
				</li>
				<li><a href="#localization">Localization</a></li>
			</ul>

			<h2 id="registration">Registration and placement of controls</h2>
			<p>Before placing the controls on the page, they need to register. This is done with the help of the directive <a href="pages.php.htm#directive-register">#Register</a>.</p>
			<p>Register should be only those controls that are required on a specific page.</p>
			<p>The following example shows the registration <code>Message</code> control.</p>
			<pre><code class="html">&lt;?#Register Src="~/Controls/Message.php" TagPrefix="php" TagName="Message"?&gt;</code></pre>
			<p>The <code>Src</code> parameter contains the path to the main file of the control. The <code>TagPrefix</code> and <code>TagName</code> contains name of the control.</p>
			<p>The following example shows the placement on the page multiple instances of the <code>Message</code> control.</p>
			<pre><code class="html">&lt;php:Message&gt;Hello world! This is message #1!&lt;/php:Message&gt;
&lt;php:Message&gt;This is message #2!&lt;/php:Message&gt;
&lt;php:Message&gt;Such messages can be any number!&lt;/php:Message&gt;</code></pre>
			<p>As a rule, the <code>TagPrefix</code> is set to <strong>php</strong> and <code>TagName</code> is the name of the control, but it is not a requirement.</p>
			<p>The following example illustrates the use of non-standard values of the <code>TagPrefix</code> and <code>TagName</code>.</p>
			<pre><code class="html">&lt;?#Register Src="~/Controls/Message.php" TagPrefix="my" TagName="Information"?&gt;

&lt;my:Information&gt;Hello world!&lt;/my:Information&gt;
			     </code></pre>
			<p>On one page can place an unlimited number of user controls with different properties.</p>

			<h2 id="include">User controls as a replacement for include files</h2>
			<p>User controls can be included files.</p>
			<p>The following example shows simple user control.</p>
			<pre><code class="html">The simple user control.
&lt;br /&gt;&lt;br /&gt;
&lt;?="You can use any tags and php code."?&gt;</code></pre>

			<p>For controls have no class, used the <code>Control</code> class by default. This allows to use properties with a text values for each control instance.</p>
			<p>The following example shows the source code of the <code>Panel</code>. The control consists of only server-side code and markup, and is not explicitly defined class. The <code>Panel</code> expects values for two anonymous property: <code>Title</code> and <code>Content</code>. The values for these properties can be passed when placing the control on the page.</p>
			<ul class="nav nav-tabs" role="tablist">
	<li class="active"><a href="#Page_TabControl1_Control" aria-controls="Page_TabControl1_Control" role="tab" data-toggle="tab">Panel.php</a></li>
	<li class=""><a href="#Page_TabControl1_Place" aria-controls="Page_TabControl1_Place" role="tab" data-toggle="tab">Placement on page</a></li>
	<li class=""><a href="#Page_TabControl1_Result" aria-controls="Page_TabControl1_Result" role="tab" data-toggle="tab">Result</a></li>
</ul>

<div class="tab-content">
	<div role="tabpanel" class="tab-pane active" id="Page_TabControl1_Control">						<pre><code class="html">&lt;div class="panel panel-default"&gt;
  &lt;?php if (isset($this-&gt;Title)) {?&gt;
  &lt;div class="panel-heading"&gt;&lt;?=$this-&gt;Title?&gt;&lt;/div&gt;
  &lt;?php } ?&gt;
  &lt;div class="panel-body"&gt;
    &lt;?=$this-&gt;Content?&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
					</div>
	<div role="tabpanel" class="tab-pane" id="Page_TabControl1_Place">						<pre><code class="php">&lt;?#Register Src="~/Controls/Panel.php" TagPrefix="php" TagName="Panel"?&gt;

&lt;php:Panel Title="Title" Content="Hello world!" /&gt;</code></pre>
					</div>
	<div role="tabpanel" class="tab-pane" id="Page_TabControl1_Result">
						<div class="panel panel-default">
		<div class="panel-heading">Title</div>
	  <div class="panel-body">
    Hello world!  </div>
</div>
					</div>
</div>

			<h2 id="object">Object model</h2>
			<p>As in the case of content pages, at the object model, the main control file must contain a class; marking is located in a <strong>.html.php</strong> file.</p>
			<p>The following example shows the <code>Message</code> control, which is used at this site. Class of the control contained in the <strong>Message.php</strong>, the markup - <strong>Message.html.php</strong>.</p>
			<ul class="nav nav-tabs" role="tablist">
	<li class="active"><a href="#Page_TabControl2_Design" aria-controls="Page_TabControl2_Design" role="tab" data-toggle="tab">Message.html.php</a></li>
	<li class=""><a href="#Page_TabControl2_Class" aria-controls="Page_TabControl2_Class" role="tab" data-toggle="tab">Message.php</a></li>
</ul>

<div class="tab-content">
	<div role="tabpanel" class="tab-pane active" id="Page_TabControl2_Design">						<pre><code class="html">&lt;div class="&lt;?=$this-&gt;GetCssClass()?&gt;"&gt;
  &lt;?=($this-&gt;ShowIcon ? $this-&gt;GetIcon() : '')?&gt;
  &lt;?=$this-&gt;Content?&gt;
&lt;/div&gt;</code></pre>
					</div>
	<div role="tabpanel" class="tab-pane" id="Page_TabControl2_Class">						<pre><code class="php">&lt;?php
/**
 * Represents message control.
 */
class Message extends Nemiro\UI\Control
{

  /**
   * The message text.
   * 
   * @var string
   */
  public $Content = '';

  /**
   * Gets or sets the message type. Allowed: Danger (default), Warning, Info, Success.
   * @var mixed
   */
  public $Type = 'Danger';

  /**
   * 
   * @var bool
   */
  public $ShowIcon = true;

  /**
   * Returns css class for the message block.
   * 
   * @return string
   */
  function GetCssClass()
  {
    switch (strtolower($this-&gt;Type))
    {
      case 'warning':
        return 'alert alert-warning';

      case 'info':
      case 'question':
        return 'alert alert-info';
              
      case 'success':
        return 'alert alert-success';

      default:
        return 'alert alert-danger';
    }
  }

  /**
   * Returns icon for the message.
   * 
   * @return string
   */
  function GetIcon()
  {
    switch (strtolower($this-&gt;Type))
    {
      case 'warning':
        return '&lt;span class="glyphicon glyphicon-warning-sign"&gt;&lt;/span&gt; ';

      case 'info':
        return '&lt;span class="glyphicon glyphicon-info-sign"&gt;&lt;/span&gt; ';

      case 'question':
        return '&lt;span class="glyphicon glyphicon-question-sign"&gt;&lt;/span&gt; ';
      
      case 'success':
        return '&lt;span class="glyphicon glyphicon-ok-sign"&gt;&lt;/span&gt; ';

      default:
        return '&lt;span class="glyphicon glyphicon-remove-sign"&gt;&lt;/span&gt; ';
    }
  }
}
?&gt;</code></pre>
					</div>
</div>

			<p>Any public properties of the control can specify the value in the <strong>HTML</strong>, or programmatically in the <a href="pages.php.htm#load">Load</a> event handler.</p>
			<p>Programmatic access to specific controls carried out by the ID. By default, each control ID is assigned automatically. Control identifier you can manually specified to the <code>ID</code> property.</p>
			<div class="alert alert-warning">
	<span class="glyphicon glyphicon-warning-sign"></span> 	IDs are not checked for uniqueness!</div>
			<p>The following example illustrates explicit definition identifiers for two instances of the <code>Message</code>.</p>
			<pre><code class="html">&lt;php:Message ID="MyMessage1"&gt;Message #1&lt;/php:Message&gt;
&lt;php:Message ID="AnyMessage"&gt;Other message&lt;/php:Message&gt;</code></pre>
			<p>You can change message text for this controls in the <a href="pages.php.htm#load">Load</a> event handler of the page.</p>
			<pre><code class="php">function Load()
{
  $this->Controls['MyMessage1']->Content = 'The text is set programmatically.';
  $this->Controls['AnyMessage']->Content = 'and here, too';
}</code></pre>
			<p>Properties controls may contain links to other members or to represent the collection. And all this can be described in the markup!</p>
			<p>For example, this site uses <code>TabControl</code> control, which comprises: the markup file <strong>TabControl.html.php</strong>, the class files <code>TabControl</code> and <code>TabItem</code>. The <code>TabItem</code> represents the <code>TabControl</code>. In the <code>TabControl</code> class, the <code>TabItem</code> class is an array in the <code>Items</code> property.</p>
			<ul class="nav nav-tabs" role="tablist">
	<li class="active"><a href="#Page_TabControl3_TabControl" aria-controls="Page_TabControl3_TabControl" role="tab" data-toggle="tab">TabControl.php</a></li>
	<li class=""><a href="#Page_TabControl3_TabItem" aria-controls="Page_TabControl3_TabItem" role="tab" data-toggle="tab">TabItem.php</a></li>
	<li class=""><a href="#Page_TabControl3_TabControlHtml" aria-controls="Page_TabControl3_TabControlHtml" role="tab" data-toggle="tab">TabControl.html.php</a></li>
</ul>

<div class="tab-content">
	<div role="tabpanel" class="tab-pane active" id="Page_TabControl3_TabControl">						<pre><code class="php">&lt;?php
require_once 'TabItem.php';

/**
 * Represents TabControl.
 */
class TabControl extends Nemiro\UI\Control
{

  /**
   * List of tabs.
   * 
   * @var TabItem[]
   */
  public $Items = array();

}
?&gt;</code></pre>
					</div>
	<div role="tabpanel" class="tab-pane" id="Page_TabControl3_TabItem">						<pre><code class="php">&lt;?php
class TabItem
{

  public $Key = '';

  public $Title = '';

  public $Content = '';

}
?&gt;</code></pre>
					</div>
	<div role="tabpanel" class="tab-pane" id="Page_TabControl3_TabControlHtml">						<pre><code class="html">&lt;ul class="nav nav-tabs" role="tablist"&gt;
&lt;?php
  $i = 0;
  foreach ($this-&gt;Items as $item)
  {
?&gt;
  &lt;li class="&lt;?=($i == 0 ? 'active' : '')?&gt;"&gt;&lt;a href="#&lt;?=sprintf('%s_%s', $this-&gt;ID, $item-&gt;Key)?&gt;" aria-controls="&lt;?=sprintf('%s_%s', $this-&gt;ID, $item-&gt;Key)?&gt;" role="tab" data-toggle="tab"&gt;&lt;?=$item-&gt;Title?&gt;&lt;/a&gt;&lt;/li&gt;
&lt;?php
    $i++;
  }
?&gt;
&lt;/ul&gt;

&lt;div class="tab-content"&gt;
&lt;?php
  $i = 0;
  foreach ($this-&gt;Items as $item)
  {
?&gt;
  &lt;div role="tabpanel" class="&lt;?=($i == 0 ? 'tab-pane active' : 'tab-pane')?&gt;" id="&lt;?=sprintf('%s_%s', $this-&gt;ID, $item-&gt;Key)?&gt;"&gt;&lt;?=$item-&gt;Content?&gt;&lt;/div&gt;
&lt;?php
    $i++;
  }
?&gt;
&lt;/div&gt;</code></pre>
					</div>
</div>
			<p>In <strong>HTML</strong>, the property <code>Items</code> must be presented in the same name tag with nested instances of the <code>TabItem</code>.</p>
			<p>The following example shows a placement instance of the <code>TabControl</code> on the page.</p>
			<pre><code class="html">&lt;php:TabControl&gt;
  &lt;php:Items&gt;
    &lt;php:TabItem Key="Item1" Title="Tab #1"&gt;
      Tab content #1
    &lt;/php:TabItem&gt;
    &lt;php:TabItem Key="Item2" Title="Tab #2"&gt;
      Tab content #2
    &lt;/php:TabItem&gt;
    &lt;php:TabItem Key="Item3" Title="Tab #3"&gt;
      Tab content #3
    &lt;/php:TabItem&gt;
  &lt;/php:Items&gt;
&lt;/php:TabControl&gt;</code></pre>

			<h2 id="control">Class Control</h2>
			<p>The <code>\Nemiro\UI\Control</code> class (hereinafter <code>Control</code>) represents a user control.</p>
			<p>From the <code>Control</code> Ð´class must inherit the classes of all of user controls.</p>
			<p>If user control do not have a class, then uses a default instance of the <code>Control</code>.</p>
			<p>The following code snippet shows an inheritance <code>Menu</code> class from the base class <code>Control</code>.</p>
			<pre><code class="php">&lt;?php
class Menu extends \Nemiro\UI\Control
{

}
?&gt;</code></pre>
			<h3 id="properties">Properties</h3>
			<p>The <code>Control</code> class has the following public properties.</p>
			<table class="table">
				<thead>
					<tr>
						<th>Property</th>
						<th><nobr>Value type</nobr></th>
						<th>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>DefaultValues</td>
						<td>Collection (key=value)</td>
						<td>
							<strong>Read-only.</strong> The default values collection.<br />Used for technical purposes.
						</td>
					</tr>
					<tr>
						<td>Source</td>
						<td>String</td>
						<td>
							<strong>Read-only.</strong> The path to the main file of the control.
						</td>
					</tr>
					<tr>
						<td>TagPrefix</td>
						<td>String</td>
						<td>
							<strong>Read-only.</strong> The name prefix of the control.
						</td>
					</tr>
					<tr>
						<td>TagName</td>
						<td>String</td>
						<td>
							<strong>Read-only.</strong> The control name.
						</td>
					</tr>
					<tr>
						<td>Name</td>
						<td>String</td>
						<td>
							<strong>Read-only.</strong> The full name, with prefix. For example: <code>php:Message</code>.
						</td>
					</tr>
					<tr>
						<td>Parent</td>
						<td>Object</td>
						<td>
							<strong>Read-only.</strong> Reference to parent.
						</td>
					</tr>
					<tr>
						<td>Body</td>
						<td>String</td>
						<td>The content of the user control. It is used for output to the page.<br />Value of the property can be overridden in a handler of the <a href="#loadComplete">LoadComplete</a> event.</td>
					</tr>
				</tbody>
			</table>
			<p>In addition, there is a virtual property <code>Content</code>, which can be defined in the descendant classes.</p>
			<p>The <code>Content</code> property is used as the value of the content of the control when the markup contains a closing tag for this control.</p>
			<p>The following example shows an explicit and implicit set a value for the <code>Content</code> property.</p>
			<pre><code class="html">&lt;php:Message&gt;This text is implicitly passed to the Content property.&lt;/php:Message&gt;
&lt;php:Message Content="This text explicitly passed to the Content property." /&gt;</code></pre>

			<h3 id="events">Events</h3>
			<p>User controls have two events: <code>Load</code> and <code>LoadComplete</code>.</p>
			<p>Both events take place after the event <a href="pages.php.htm#load">Load</a> and before the event <a href="pages.php.htm#loadÐ¡omplete">LoadComplete</a> of the page.</p>
			<h4 id="load">Load</h4>
			<p>The <code>Load</code> event occurs before building data to output.</p>
			<p>In this event, in theory, you can change the <code>Source</code>, but it is better not to do so.</p>
			<p><code>Load</code> event handler can be useful to dynamically change the values of the custom properties of the control.</p>
			<p>The following example shows the change in value of the <code>Content</code> property for the stripped-down version of the <code>Message</code> control.</p>
			<pre><code class="php">&lt;?php
class Message extends \Nemiro\UI\Control
{

  public $Content = '';

  function Load()
  {
    $this->Content = 'Text: '.$this->Content;
  }

}
?&gt;</code></pre>

			
			<h4 id="loadComplete">LoadComplete</h4>
			<p>The <code>LoadComplete</code> event occurs after build the data.</p>
			<p>In this event handler, you can change the value of the <code>Body</code>, which contains data about the control, prepared for the output on the page.</p>
			<p>The following example illustrates an override the value of the <code>Body</code> property for the stripped-down version of the <code>Message</code> control.</p>
			<pre><code class="php">&lt;?php
class Message extends \Nemiro\UI\Control
{

  public $Content = '';

  function LoadComplete()
  {
    $this->Body = 'Message: '.$this->Content;
  }

}
?&gt;</code></pre>

			<h2 id="localization">Localization</h2>
			<p>User controls do not have their own localization files. They use global resources or resources of page on which are placed.</p>
			<p><a href="localization.php.htm">Read more</a>.</p>
		
			<!--//-->
		</div>

		<!--Footer control-->
		<footer class="text-center small">
	<hr />
	<!--a class="github-button" href="https://github.com/alekseynemiro" data-style="mega" data-count-href="/alekseynemiro/followers" data-count-api="/users/alekseynemiro#followers" data-count-aria-label="# followers on GitHub" aria-label="Follow @alekseynemiro on GitHub">Follow @alekseynemiro</a-->
	<a class="github-button" href="https://github.com/alekseynemiro/WebForms.PHP" data-icon="octicon-star" data-style="mega" data-count-href="/alekseynemiro/WebForms.PHP/stargazers" data-count-api="/repos/alekseynemiro/WebForms.PHP#stargazers_count" data-count-aria-label="# stargazers on GitHub" aria-label="Star alekseynemiro/WebForms.PHP on GitHub">Star</a>
	<a class="github-button" href="https://github.com/alekseynemiro/WebForms.PHP/fork" data-icon="octicon-repo-forked" data-style="mega" data-count-href="/alekseynemiro/WebForms.PHP/network" data-count-api="/repos/alekseynemiro/WebForms.PHP#forks_count" data-count-aria-label="# forks on GitHub" aria-label="Fork alekseynemiro/WebForms.PHP on GitHub">Fork</a>
	<a class="github-button" href="https://github.com/alekseynemiro/WebForms.PHP/archive/master.zip" data-icon="octicon-cloud-download" data-style="mega" aria-label="Download alekseynemiro/WebForms.PHP on GitHub">Download</a>
	<br /><br />
	Code licensed under <a rel="license" href="http://www.apache.org/licenses/LICENSE-2.0">Apache License 2.0</a>, documentation under <a rel="license" href="http://creativecommons.org/licenses/by-nc/4.0/">CC BY-NC 4.0</a><br />
	Copyright Â© Aleksey Nemiro, 2015. All rights reserved.
	<br /><br />
</footer>

<script async defer id="github-bjs" src="https://buttons.github.io/buttons.js"></script>

<script type="text/javascript">
	$(document).ready(function () {
		$('pre code').each(function (i, block) {
			hljs.highlightBlock(block);
		});
	});
</script>

<script type="text/javascript">
	(function (i, s, o, g, r, a, m) {
		i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
			(i[r].q = i[r].q || []).push(arguments)
		}, i[r].l = 1 * new Date(); a = s.createElement(o),
		m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
	})(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

	ga('create', 'UA-4793481-9', 'auto');
	ga('send', 'pageview');

</script>
		<!--//-->
	</body>
</html>