[
	{ "Key": "PageTitle", "Value": "Генерирование элементов HTML" },
	{ "Key": "HeaderTitle", "Value": "Генерирование элементов HTML" },
	{ "Key": "HeaderDescription", "Value": "Вспомогательный класс Html позволяет генерировать стандартные элементы управления HTML, с возможностью автоматического восстановления состояния после отправки формы." },
	{ "Key": "PHP", "Value": "Код PHP" },
	{ "Key": "HTML", "Value": "Итоговый HTML" },
	{ "Key": "Design", "Value": "Просмотр" },
	{ "Key": "IntroductionText1", "Value": "Статичный класс <code>Nemiro\\UI\\Html</code> (далее <code>Html</code>) позволяет генерировать элементы управления <strong>HTML</strong>." },
	{ "Key": "IntroductionText2", "Value": "Практически все методы этого класса принимают параметр <code>$htmlAttributes</code>, который позволяет задать набор любых параметров/атрибутов генерируемому элементу управления. Например:" },
	{ "Key": "IntroductionText3", "Value": "Одной из проблем работы с элементами формами является необходимость ручного восстановления данных, если форма не будет принята сервером (например, при наличии ошибок в данных). Статичный класс <code>Html</code> реашает эту проблему и, после отправки формы, все указанные значения будут автоматически восстанавливаться." },
	{ "Key": "FormExample", "Value": "Пример формы" },
	{ "Key": "IntroductionText4", "Value": "Попробуйте заполнить и отправить представленную форму. После перезагрузки страницы, все введенные значения будут автоматически восстановлены (это работает только в <strong>PHP</strong> версии этого сайта, в <strong>HTML</strong> - нет, т.к. статичная копия сайта не имеет серверного кода)." },
	{ "Key": "LabelText1", "Value": "При размещении <strong>label</strong> требуется указать текст надписи." },
	{ "Key": "LabelText2", "Value": "Если требуется привязать <strong>label</strong> к элементу управления, то во втором параметре можно указать идентификатор этого элемента." },
	{ "Key": "CheckBoxText1", "Value": "Для размещения <strong>CheckBox</strong> потребуется указать имя элемента управления. По этому имени можно получить значение элемента, после отправки формы на сервер." },
	{ "Key": "CheckBoxText2", "Value": "По умолчанию, параметр <code>value</code> имеет значение <code>true</code>, но можно указать собственное значение, как показано в следующем примере." },
	{ "Key": "CheckBoxText3", "Value": "При помощи метода <strong>Label</strong> можно добавить подпись к <strong>CheckBox</strong>." },
	{ "Key": "CheckBoxText4", "Value": "Для связи надписи с <strong>CheckBox</strong>, идентификатор (в данном случае, <code>checkbox123</code>) должен быть одинаковым для <strong>Label</strong> и <strong>CheckBox</strong>." },
	{ "Key": "CheckBoxListText1", "Value": "Чтобы создать список <strong>CheckBox</strong>, можно использовать метод <strong>CheckBoxList</strong>, который принимает имя группы и данные для построения списка." },
	{ "Key": "CheckBoxListText2", "Value": "Список элементов представляет ассоциативный массив, который должен содержаться параметры <code>value</code> и <code>title</code>, которые будут использоваться при построении элементов <strong>CheckBox</strong> в списке." },
	{ "Key": "RadioButtonText1", "Value": "Метод <strong>RadioButton</strong> очень похож на <strong><a href=\"#CheckBox\">CheckBox</a></strong>." },
	{ "Key": "RadioButtonText2", "Value": "Для группировки <strong>RadioButton</strong> используется имя элемента, которое должно быть одинаковым для всех опций в группе. Для добавления уникальноести, можно указать идентификатор элемента во втором параметре." },
	{ "Key": "RadioButtonListText1", "Value": "Принцип построения списка <strong>RadioButton</strong> ничем не отличается от <strong>CheckBox</strong>." },
	{ "Key": "TextBoxText1", "Value": "Метод <strong>TextBox</strong> позволяет разместить однострочное текстовое поле. Также можно использовать вспомогательные методы <strong>Password</strong> и <strong>Hidden</strong>, для размещения текстовых полей одноименного типа." },
	{ "Key": "TextAreaText1", "Value": "Для формирования многострочных текстовых полей предназначен метод <strong>TextArea</strong>." },
	{ "Key": "DropDownListText1", "Value": "При помощи метода <strong>DropDownList</strong> можно создать всплывающий список." },
	{ "Key": "DropDownListText2", "Value": "Элементы списка формируются по аналогии с элементами для <strong><a href=\"#CheckBoxList\">CheckBoxList</a></strong> или <strong><a href=\"#RadioButtonList\">RadioButtonList</a></strong>." },
	{ "Key": "ListBoxText1", "Value": "Для построения многострочных списков можно использовать метод <strong>ListBox</strong>, который по сути является аналогом методу <strong>DropDownList</strong>, но помимо прочего, позволяет указать число отображаемых в списке строк." },
	{ "Key": "PaginationText1", "Value": "Метод <strong>Pagination</strong> позволяет сформировать список страниц." },
	{ "Key": "PaginationText2", "Value": "Для размещения списка страниц, как минимум, потребуется указать номер ткущей страницы и общее число записей." },
	{ "Key": "PaginationText3", "Value": "Дополнительно можно указать <strong>URL</strong> для построения ссылок для списка страниц. Если <strong>URL</strong> не будет указан, то будет использоваться адрес текущей страницы." },
	{ "Key": "PaginationText4", "Value": "По умолчанию, при построении ссылок для списка страниц, из <strong>URL</strong> удаляются все параметры. Это сделано для исключения появления неправильных ссылок (чтобы не засорять поисковый индекс и недопустить выбивание сайта из индекса). Существует возможность указать список допустимых в <strong>URL</strong> параметров. В следующем примере показано, как это сделать." }
]