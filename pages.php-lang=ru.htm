<!--registration controls-->


<!--//-->

<!DOCTYPE html>

<html>
  <head>
    <title>Страницы - WebForms.PHP</title>
		<meta name="viewport" content="width=device-width" />
		<link rel="stylesheet" href="Content/css/compiled.min.css" />
		<script src="Scripts/compiled.min.js" type="text/javascript"></script>
		<!--block of content "Head"-->
		
		<!--//-->
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8" /><meta name="generator" content="PHP WebForms Engine by Aleksey Nemiro // v.3.1 // http://aleksey.nemiro.ru" /><meta name="DESCRIPTION" content="Template engine, HTML components and the beginnings of Framework for web sites creation in PHP." /><meta name="KEYWORDS" content="WebForms, PHP, Documentation, Manual, Guide, Demo" /><meta name="AUTHOR" content="Aleksey Nemiro (VVO-JOK-LED)" /><meta name="ROBOTS" content="ALL" /></head>
	<body>
		<!--Header control-->
		<header id="header">
	<nav class="navbar navbar-default"> <!-- navbar-fixed-top -->
		<div class="container">
			<div class="navbar-header">
				<button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#nav">
					<span class="icon-bar"></span>
					<span class="icon-bar"></span>
					<span class="icon-bar"></span>                        
				</button>
				<a href="index-ru.htm" class="navbar-brand">WebForms.PHP</a>
			</div>
			<div id="nav" class="collapse navbar-collapse">
				<ul class="nav navbar-nav">
					<li><a href="index-ru.htm#GettingStarted"><span class="glyphicon glyphicon-save"></span> Быстрый старт</a></li>
					<li><a href="templates.php-lang=ru.htm"><span class="glyphicon glyphicon-picture"></span> Шаблоны</a></li>
					<li><a href="pages.php-lang=ru.htm"><span class="glyphicon glyphicon-file"></span> Страницы</a></li>
					<li><a href="controls.php-lang=ru.htm"><span class="glyphicon glyphicon-cog"></span> Контролы</a></li>
					<li><a href="elements.php-lang=ru.htm"><span class="glyphicon glyphicon-list-alt"></span> Элементы HTML</a></li>
					<li><a href="localization.php-lang=ru.htm"><span class="glyphicon glyphicon-globe"></span> Локализация</a></li>
				</ul>
				<ul class="nav navbar-nav navbar-right">
					<li><a href="pages.php-lang=ru.htm"><img src="Content/images/ru.png" alt="RU" title="" width="22" height="22" /></a></li>
					<li><a href="pages.php.htm"><img src="Content/images/en.png" alt="EN" title="" width="22" height="22" /></a></li>
				</ul>
			</div>
		</div>
	</nav>
		<div class="jumbotron"> <!-- style="padding-top:72px;" -->
		<div class="container">
			<h1>Страницы</h1>
			<p>Страницы с содержимым автоматически соединяются с шаблонами и выводят блоки контента. Класс Page является основным элементом платформы WebForms.PHP. Страницы могут иметь пользовательские свойства, методы и обработчики событий. При помощи директив можно упростить процесс программирования страниц и расширить их функционал за счет пользовательских элементов управления.</p>
		</div>
	</div>
	</header>
		<!--//-->


		<div class="container">
			<!--block of content "MainContent"-->
						<h2>Введение</h2>
			<p>Для использования шаблонов, файлы страниц должны обрабатываться <strong>PHP</strong> (как правило, иметь расширение <strong>.php</strong>).</p>
			<p>Страницы могут быть простыми, состоять из одного файла, содержащего <strong>HTML</strong> и, при необходимости, код <strong>PHP</strong>.</p>
			<p>Но для использования всех возможностей движка потребуется разделение кода <strong>HTML</strong> и <strong>PHP</strong>, как минимум, на два файла. В основном файле должно содержаться объектное представление страницы - класс. Во втором файле - разметка страницы (код <strong>HTML</strong>).</p>
			<p>Файл с разметкой должен иметь тоже название, что и файл страницы, но с расширением <strong>.html.php</strong>.</p>
			<p>Помимо этого, каждая страница может иметь ресурсы локализации, которые должны располагаться в файлах <strong>.json</strong>.</p>

			<h3 id="contents">Содержание</h3>
			<ul>
				<li><a href="#content">Блоки контента</a></li>
				<li><a href="#simple">Простые страницы</a></li>
				<li><a href="#html-php">Разделение кода PHP и HTML</a></li>
				<li><a href="#only-php">Только код PHP</a></li>
				<li>
					<a href="#directives">Директивы</a>
					<ul>
						<li><a href="#directive-page">Директива #Page</a></li>
						<li><a href="#directive-register">Директива #Register</a></li>
					</ul>
				</li>
				<li>
					<a href="#class-page">Класс Page</a>
					<ul>
						<li><a href="#properties">Свойства</a></li>
						<li>
							<a href="#events">Свойства</a>
							<ul>
								<li><a href="#preload">PreLoad</a></li>
								<li><a href="#load">Load</a></li>
								<li><a href="#loadСomplete">LoadComplete</a></li>
							</ul>
						</li>
					</ul>
				</li>
				<li><a href="#localization">Локализация</a></li>
			</ul>

			<h2 id="content">Блоки контента</h2>

			<p>Содержимое для блоков контента должно располагаться в тегах: <code>&lt;php:Content /&gt;</code>. Имя (идентификатор) блока указывается в параметре <code>ID</code>.</p>
			<pre><code class="html">&lt;php:Content ID="имяМетки"&gt;
  Содержимое блока.
  Допустимо использование любых тэгов, 
  серверного кода и 
  элементов управления.
&lt;/php:Content&gt;</code></pre>
			<p>Все, что располагается за переделами тегов <code>&lt;php:Content /&gt;</code> будет проигнорировано.</p>
			<pre><code class="html">Этот текст будет проигнорирован, т.к. находится вне блока &lt;php:Content /&gt;.

&lt;php:Content ID="MainContent"&gt;
  Это текст будет выведен вместо метки &lt;php:MainContent/&gt;.
&lt;/php:Content&gt;

Этот текст будет проигнорирован, т.к. находится вне блока &lt;php:Content /&gt;.</code></pre>
			<p>Допустимо размещение блоков для несуществующих в шаблоне меток. Это будет полезно при динамическом изменении шаблона, когда в одном шаблоне определен один набор блоков контента, а в другом - другой.</p>
			<p>В следующем примере показано два шаблона. В первом определен блок <code>&lt;php:MainContent/&gt;</code>, во втором два блока: <code>&lt;php:MainContent/&gt;</code> и <code>&lt;php:RightPanel/&gt;</code>. На странице контента определено содержимое для двух блоков. При использовании шаблона <strong>Layout1.php</strong> клиент получит только содержимое для блока <code>&lt;php:MainContent/&gt;</code>, поскольку в шаблоне нет других блоков  (см. Результат #1). А при использовании шаблона <strong>Layout2.php</strong>, клиенту будет выдано содержимое определенное для обоих блоков (см. Результат #2).</p>
			<ul class="nav nav-tabs" role="tablist">
	<li class="active"><a href="#Page_TabControl1_Layout1" aria-controls="Page_TabControl1_Layout1" role="tab" data-toggle="tab">Шаблон Layout1.php</a></li>
	<li class=""><a href="#Page_TabControl1_Layout2" aria-controls="Page_TabControl1_Layout2" role="tab" data-toggle="tab">Шаблон Layout2.php</a></li>
	<li class=""><a href="#Page_TabControl1_Content" aria-controls="Page_TabControl1_Content" role="tab" data-toggle="tab">Страница контента</a></li>
	<li class=""><a href="#Page_TabControl1_Result1" aria-controls="Page_TabControl1_Result1" role="tab" data-toggle="tab">Результат #1</a></li>
	<li class=""><a href="#Page_TabControl1_Result2" aria-controls="Page_TabControl1_Result2" role="tab" data-toggle="tab">Результат #2</a></li>
</ul>

<div class="tab-content">
	<div role="tabpanel" class="tab-pane active" id="Page_TabControl1_Layout1">						<pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div class="container"&gt;
      &lt;php:MainContent/&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre>
					</div>
	<div role="tabpanel" class="tab-pane" id="Page_TabControl1_Layout2">						<pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div class="container"&gt;
      &lt;div class="col-md-10"&gt;
        &lt;php:MainContent/&gt;
      &lt;/div&gt;
      &lt;div class="col-md-2"&gt;
        &lt;php:RightPanel/&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre>
					</div>
	<div role="tabpanel" class="tab-pane" id="Page_TabControl1_Content">						<pre><code class="html">&lt;php:Content ID="MainContent"&gt;
  Это содержимое для блока MainContent.
&lt;/php:Content&gt;

&lt;php:Content ID="RightPanel"&gt;
  Это содержимое для блока RightPanel.  
&lt;/php:Content&gt;</code></pre>
					</div>
	<div role="tabpanel" class="tab-pane" id="Page_TabControl1_Result1">						<pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Заголовок по умолчанию&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div class="container"&gt;
      Это содержимое для блока MainContent.
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre>
					</div>
	<div role="tabpanel" class="tab-pane" id="Page_TabControl1_Result2">						<pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Заголовок по умолчанию&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div class="container"&gt;
      &lt;div class="col-md-10"&gt;
        Это содержимое для блока MainContent.
      &lt;/div&gt;
      &lt;div class="col-md-2"&gt;
         Это содержимое для блока RightPanel. 
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre>
					</div>
</div>
			<p>Если на одной контентной странице будет размещено несколько блоков контента с одинаковым идентификатором, то будет использоваться последний блок. Так лучше не делать, т.к. будут расходоваться ресурсы на обработку всех блоков.</p>
			<pre><code class="html">&lt;php:Content ID="MainContent"&gt;
  Это текст будет обработан, но не будет выведен, т.к. ниже размещен второй блок с идентификатором MainContent.
&lt;/php:Content&gt;

&lt;php:Content ID="MainContent"&gt;
  Это текст будет выведен вместо метки &lt;php:MainContent/&gt;.
&lt;/php:Content&gt;</code></pre>

			<h2 id="simple">Простые страницы</h2>
			
			<p>Простые страницы состоят из одного файла, содержащего разметку и блоки контента, а также могут содержать директивы, пользовательские элементы управления и любой серверный код.</p>
			<p>Простые страницы могут быть полезны для вывода статичного содержимого, когда не требуется управление процессом формирования страницы на сервере.</p>
			<p>Для работы шаблонизатора, на страницу необходимо включить файл <strong>global.php</strong>, а также вызвать процесс обработки страницы командной <code>App::Magic()</code>.</p>
			<pre><code class="php">&lt;?php 
require_once 'global.php';
\Nemiro\App::Magic();
?&gt;</code></pre>
			<p>В следующем примере показана реализация простой страницы, которая формирует содержимое для метки <code>&lt;php:MainContent/&gt;</code>. В директиве <code>#Page</code> указана ссылка на файл шаблона, а также заголовок страницы (<code>&lt;title /&gt;</code>).</p>
			<pre><code class="html">&lt;?#Page Layout="~/Layouts/_Layout.php" Title="Это простая страница"?&gt;

&lt;php:Content ID="MainContent"&gt;
  &lt;h2&gt;Привет, мир!&lt;/h2&gt;
&lt;/php:Content&gt;

&lt;?php 
require_once 'global.php';
Nemiro\App::Magic();
?&gt;</code></pre>
			<p>Простые страницы не предоставляют доступ к объектному представлению страницы и имеют ограниченный функционал по управлению шаблонами и пользовательскими элементами управления.</p>
			
			<h2 id="html-php">Разделение кода PHP и HTML</h2>

			<p>Для использования всех возможностей, рекомендуется разделять код <strong>HTML</strong> и <strong>PHP</strong>.</p>
			<p>В основном файле страницы создается класс страницы. Имя класса должно соответствовать имени файла страницы (без расширения). Разметка должна находиться в файле с расширением <strong>.html.php</strong>.</p>

			<p>Например, есть страница <strong>index.php</strong>, она должна иметь примерно следующее содержание:</p>
			<pre><code class="php">&lt;?php
require_once 'global.php';

class Index extends \Nemiro\UI\Page
{

}

\Nemiro\App::Magic();
?&gt;</code></pre>
			<p>А разметка должна располагаться в файле <strong>index.html.php</strong>. В следующем примере показан возможный вариант файла <strong>index.html.php</strong>.</p>
			<pre><code class="html">&lt;php:Content ID="MainContent"&gt;
  &lt;h2&gt;Привет, мир!&lt;/h2&gt;
&lt;/php:Content&gt;</code></pre>
			<p>Такая модель позволяет снизить смешивание серверного и клиентского кода, а также позволяет полностью управлять процессом формирования страницы.</p>
			<p>Класс страницы может содержать любые публичные свойства и функции, которые можно использовать в коде разметки, через ключевое слово <code>$this</code>. Например, базовый класс <code>\Nemiro\UI\Page</code> имеет свойство <code>Title</code>, которое содержит заголовок текущей страницы и его можно вывести на страницу следующим образом:</p>
			<pre><code class="html">&lt;php:Content ID="MainContent"&gt;
  &lt;h2&gt;Заголовок страницы: &lt;?=$this->Title?&gt;&lt;/h2&gt;
&lt;/php:Content&gt;</code></pre>
			<p><a href="#class-page">Подробнее о классе Page</a>.</p>
			
			<h2 id="only-php">Только код PHP</h2>
			<p>Допустимо не создавать файлы с разметкой. В таком случае, страница будет состоять только из класса, а содержимое для блоков контента должно формироваться программно.</p>
			<p>Например, файл <strong>index.php</strong> может иметь следующее содержание.</p>
			<pre><code class="php">&lt;?php
require_once 'global.php';

class Index extends \Nemiro\UI\Page
{

  function Load()
  {
    $this->Title = 'Это страница без разметки';
    $this->Content['MainContent'] = 'А здесь у нас контент для блока MainContent.';
  }

}

\Nemiro\App::Magic();
?&gt;</code></pre>
			<p>Но такой подход используется редко, поскольку для большинства случаев это не очень удобно.</p>

			<h2 id="directives">Директивы</h2>
			<h3 id="directive-page">Директива &lt;?#Page ?&gt;</h3>

			<p>Директива <code>&lt;?#Page ?&gt;</code> позволяет переопределить параметры инициализации страницы заданные по умолчанию (в файле <strong>config.php</strong>).</p>
			<p>Директива располагается в верхней части страницы <strong>HTML</strong>, параметры записываются в стиле атрибутов тегов <strong>HTML/XML</strong>. Например: <code>&lt;?#Page Title="Заголовок страницы" Layout="~/Layouts/_Layout.php" ?&gt;</code></p>
			<p>Список поддерживаемых параметров представлен в следующей таблице.</p>
			<table class="table">
				<thead>
					<tr>
						<th>Параметр</th>
						<th><nobr>Тип значения</nobr></th>
						<th>Описание</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>Layout</td>
						<td>Строка</td>
						<td>Позволяет указать файл шаблона, который следует использовать при формировании страницы.</td>
					</tr>
					<tr>
						<td>Title</td>
						<td>Строка</td>
						<td>Позволяет указать html-заголовок страницы (аналог тега &lt;title&gt;&lt;/title&gt;).</td>
					</tr>
					<tr>
						<td>Optimized</td>
						<td>Логический</td>
						<td>Позволяет управлять режимом оптимизации результирующего html-кода страницы.</td>
					</tr>
					<tr>
						<td>Cache</td>
						<td>Логический</td>
						<td>Позволяет управлять кешированием страницы.</td>
					</tr>
					<tr>
						<td>Culture</td>
						<td>Строка</td>
						<td>Позволяет задать культуру (язык) для страницы. Как правило, используется стандартный двухбуквенный код языка. Например: ru, en.</td>
					</tr>
				</tbody>
			</table>
			<p>В следующем примере показано использование директивы <code>&lt;?#Page ?&gt;</code> для назначения заголовка страницы и включения режима оптимизации <strong>HTML</strong>.</p>
			<pre><code class="html">&lt;?#Page Title="Заголовок страницы" Optimized="true" ?&gt;

&lt;php:Content ID="MainContent"&gt;
  Привет, мир!
&lt;/php:Content&gt;</code></pre>
			<p>Использование директивы <code>&lt;?#Page ?&gt;</code> наиболее актуально при создании <a href="#simple">простых страниц</a>.</p>

			<h3 id="directive-register">Директива &lt;?#Register ?&gt;</h3>

			<p>Как и в <a href="templates.php-lang=ru.htm">шаблонах</a>, на обычных страницах можно использовать директиву <code>&lt;?#Register ?&gt;</code> для регистрации <a href="controls.php-lang=ru.htm">пользовательских элементов управления</a>.</p>
			<p>Директива <code>&lt;?#Register ?&gt;</code> принимает четыре параметра, список которых представлен в следующей таблице.</p>
			<table class="table">
				<thead>
					<tr>
						<th>Параметр</th>
						<th><nobr>Тип значения</nobr></th>
						<th>Описание</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>Src</td>
						<td>Строка</td>
						<td><strong>Обязательный параметр.</strong> Путь к основному файлу элемента управления.</td>
					</tr>
					<tr>
						<td>TagPrefix</td>
						<td>Строка</td>
						<td>
							<strong>Обязательный параметр.</strong> Префикс имени элемента управления, который будет использоваться при размещении экземпляра элемента на странице. Префикс может быть полезен для разделения элементов на группы, привязки к определенному источнику, или, когда на странице одновременно требуется разместить несколько элементов с одинаковыми именами, но разным источником.
						</td>
					</tr>
					<tr>
						<td>TagName</td>
						<td>Строка</td>
						<td>
							<strong>Обязательный параметр.</strong> Имя элемента управления, которое будет использоваться при размещении экземпляра элемента на странице.
						</td>
					</tr>
					<tr>
						<td>ClassName</td>
						<td>Строка</td>
						<td>
							<strong>Опциональный параметр.</strong> Указывает имя класса элемента. По умолчанию, в качестве имени класса ожидается название файла элемента, без учета расширения. Например, основной файл элемента <strong>Message.php</strong>, то ClassName по умолчанию будет <code>Message</code>.
						</td>
					</tr>
				</tbody>
			</table>
			<p>Количество директив <code>&lt;?#Register ?&gt;</code> на одной странице ограничивается, разве что, здравым смыслом.</p>
			<p>В следующем примере показано использование директивы <code>&lt;?#Register ?&gt;</code> для регистрации на странице <a href="controls.php-lang=ru.htm">пользовательских элементов управления</a> <code>Message</code> и <code>TabControl</code>, и их последующее использование.</p>
			<ul class="nav nav-tabs" role="tablist">
	<li class="active"><a href="#Page_TabControl2_Content" aria-controls="Page_TabControl2_Content" role="tab" data-toggle="tab">Страница контента</a></li>
	<li class=""><a href="#Page_TabControl2_Result" aria-controls="Page_TabControl2_Result" role="tab" data-toggle="tab">Результат</a></li>
</ul>

<div class="tab-content">
	<div role="tabpanel" class="tab-pane active" id="Page_TabControl2_Content">						<pre><code class="html">&lt;?#Register Src="~/Controls/Message.php" TagPrefix="php" TagName="Message"?&gt;
&lt;?#Register Src="~/Controls/TabControl.php" TagPrefix="php" TagName="TabControl"?&gt;

&lt;php:Content ID="MainContent"&gt;
  Привет, мир!
  &lt;php:Message Type="success" Content="Всё хорошо!" /&gt;
  &lt;php:TabControl&gt;
    &lt;php:Items&gt;
      &lt;php:TabItem Key="Tab1" Title="Обратите внимание"&gt;
        Элементы TabControl и Message не являются частью WebForms.PHP,
        эти элементы были сделаны специально для демонстрационного сайта.
&lt;/php:TabItem&gt;
      &lt;php:TabItem Key="Tab2" Title="Однако..."&gt;
        Но при желании вы можете использовать эти элементы в своих проектах, 
        просто скопировав файлы элементов из папки /Controls.
        Для правильной работы этих элементов также потребуется Bootstrap3.
      &lt;/php:TabItem&gt;
    &lt;/php:Items&gt;
  &lt;/php:TabControl&gt;
&lt;/php:Content&gt;</code></pre>
					</div>
	<div role="tabpanel" class="tab-pane" id="Page_TabControl2_Result">						<pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Заголовок по умолчанию&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div class="container"&gt;
      &lt;!--Начало вывода блока контента MainContent--&gt;
        Привет, мир!

        &lt;!--Начало вывода элемента Message--&gt;
        &lt;div class="alert alert-success"&gt;Всё хорошо!&lt;/div&gt;
        &lt;!--Конец вывода элемента Message--&gt;

        &lt;!--Начало вывода элемента TabControl--&gt;
        &lt;ul class="nav nav-tabs" role="tablist"&gt;
          &lt;li class="active"&gt;
            &lt;a href="#Page_TabControl1_Tab1" aria-controls="Page_TabControl1_Tab1" role="tab" data-toggle="tab" aria-expanded="false"&gt;
              Обратите внимание
            &lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href="#Page_TabControl1_Tab2" aria-controls="Page_TabControl1_Tab2" role="tab" data-toggle="tab" aria-expanded="true"&gt;
              Однако...
            &lt;/a&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
        &lt;div class="tab-content"&gt;
          &lt;div role="tabpanel" class="tab-pane" id="Page_TabControl1_Tab1"&gt;
            
        Элементы TabControl и Message не являются частью WebForms.PHP,
        эти элементы были сделаны специально для демонстрационного сайта.

          &lt;/div&gt;
          &lt;div role="tabpanel" class="tab-pane" id="Page_TabControl1_Tab2"&gt;
            
        Но при желании вы можете использовать эти элементы в своих проектах, 
        просто скопировав файлы элементов из папки /Controls.
        Для правильной работы этих элементов также потребуется Bootstrap3.
      
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;!--Конец вывода элемента TabControl--&gt;
      &lt;!--Конец вывода блока контента MainContent--&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre>
					</div>
</div>

			<h2 id="class-page">Класс Page</h2>

			<p>Класс <code>\Nemiro\UI\Page</code> (далее <code>Page</code>) - этой основной класс, который отвечает за формирование страниц.</p>
			<p>От класса <code>Page</code> должны наследоваться (<code>extends</code>) классы всех страниц.</p>
			<p>Если у страницы нет класса, то используется экземпляр класса <code>Page</code> по умолчанию, с ограниченными возможностями.</p>
			<p>В следующем фрагменте кода показан вариант наследования класса страницы <code>Forum</code> от базового класса <code>Page</code>.</p>
			<pre><code class="php">&lt;?php
require_once 'global.php';

class Forum extends \Nemiro\UI\Page
{

}

\Nemiro\App::Magic();
?&gt;</code></pre>

			<h3 id="properties">Свойства</h3>
			<p>Класс <code>Page</code> имеет следующие публичные свойства.</p>
			<table class="table">
				<thead>
					<tr>
						<th>Свойство</th>
						<th><nobr>Тип значения</nobr></th>
						<th>Описание</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>Optimized</td>
						<td>Логический</td>
						<td>Позволяет управлять режимом оптимизации результирующего html-кода страницы.<br />Программно изменить режим оптимизации можно в обработчике события <a href="#preload">PreLoad</a> или <a href="#load">Load</a>.</td>
					</tr>
					<tr>
						<td>Cache</td>
						<td>Логический</td>
						<td>Позволяет управлять кешированием страницы.<br />Программно изменить режим кеширования страницы можно в обработчике события <a href="#preload">PreLoad</a>.</td>
					</tr>
					<tr>
						<td>Layout</td>
						<td>Строка</td>
						<td>Содержит путь к файлу шаблона. Это либо значение по умолчанию, из файла <strong>config.php</strong>, либо значение определенное в директиве <code>&lt;?#Page ?&gt;</code>, либо установленное программно значение.<br />Программно изменить путь к файлу шаблона можно в обработчике события <a href="#preload">PreLoad</a>.</td>
					</tr>
					<tr>
						<td>Encode</td>
						<td>Строка</td>
						<td>Название кодировки страницы. Передается в <code>Content-Type</code>.<br />Программно изменить значение этого свойства можно в обработчике события <a href="#preload">PreLoad</a>.</td>
					</tr>
					<tr>
						<td>Culture</td>
						<td>Строка</td>
						<td>Код культуры (язык) для страницы. Как правило, используется стандартный двухбуквенный код языка. Например: ru, en.<br />Программно изменить значение этого свойства можно в обработчике события <a href="#preload">PreLoad</a> или <a href="#load">Load</a>.</td>
					</tr>
					<tr>
						<td>Title</td>
						<td>Строка</td>
						<td>Заголовок страницы (аналог тега &lt;title&gt;&lt;/title&gt;).<br />Программно изменить значение этого свойства можно в обработчике события <a href="#preload">PreLoad</a> или <a href="#load">Load</a>.</td>
					</tr>
					<tr>
						<td>Content</td>
						<td>Коллекция (ключ=значение)</td>
						<td>Коллекция блоков содержимого страницы; где ключом является имя (идентификатор) блока, а значением - содержимое блока.<br />Программно изменить блоки контента можно в обработчике события <a href="#preload">PreLoad</a> или <a href="#load">Load</a>.<br />Например: <code>$this->Content['MainContent'] = 'Контент для блока MainContent.';</code></td>
					</tr>
					<tr>
						<td>Meta</td>
						<td>Коллекция (ключ=значение)</td>
						<td>Коллекция метатегов; где ключом является имя (идентификатор) тега, а значением - содержимое тега.<br />Программно добавить метатеги можно в обработчике события <a href="#preload">PreLoad</a> или <a href="#load">Load</a>.<br />Например: <code>$this->Meta['DESCRIPTION'] = 'Описание страницы.';</code>, на выходе будет метатег:<br /><code>&lt;meta name="DESCRIPTION" content="Описание страницы." /&gt;</code>.<br />Для установки описания и ключевых слов также можно использовать методы <code>SetDescription</code> и <code>SetKeyWords</code>.<br />Например: <code>$this->SetDescription('Описание страницы.');</code></td>
					</tr>
					<tr>
						<td>Scripts</td>
						<td>Строковой массив</td>
						<td>Массив ссылок на клиентские скрипты, которые будут включены в страницу.<br />Программно добавить или изменить ссылки можно в обработчике события <a href="#preload">PreLoad</a> или <a href="#load">Load</a>.</td>
					</tr>
					<tr>
						<td>Controls</td>
						<td>Коллекция (ключ=значение)</td>
						<td>Коллекция элементов управления; где ключ - идентификатор элемента (<code>ID</code>), а значение - элемент управления.<br />Программно изменить свойства элементов управления можно в обработчике события <a href="#load">Load</a>.<br />Обратите внимание, что через эту коллекцию нельзя получить прямой доступ к экземплярам элементов управления, это лишь возможность определить значения свойств элементам, которые будут созданы в процессе формирования страницы. Через коллекцию <code>Controls</code> невозможно получить доступ к публичным методам элемента управления.</td>
					</tr>
					<tr>
						<td>Resources</td>
						<td>Коллекция (ключ=значение)</td>
						<td>Коллекция ресурсов локализации; где ключ - имя ресурса, а значение - локализованная строка.<br />Программно изменить ресурсы можно в обработчике события <a href="#load">Load</a>.</td>
					</tr>
				</tbody>
			</table>
			<p>Все публичные свойства доступны для классов-потомков, т.е. классов страниц.</p>
			<div class="alert alert-warning">
	<span class="glyphicon glyphicon-warning-sign"></span> 	Во избежание конфликтов, имена пользовательских свойств не должны пересекаться с именами свойств базового класса.</div>

			<h3 id="events">Свойства</h3>
			<p>У страницы существует три события, которые можно обработать.</p>

			<h4 id="preload">PreLoad</h4>
			<p>Событие <code>PreLoad</code> возникает после инициализации страницы, до начала вывода HTTP-заголовков, загрузки шаблона и ресурсов локализации.</p>
			<p>Как следствие этого, в обработчике события <code>PreLoad</code> можно изменить путь к файлу шаблона и добавить произвольные заголовки <strong>HTTP</strong>.</p>
			<p>Управлять ресурсами локализации (свойство <code>Resources</code>) в обработчике этого события не имеет смысла, т.к. ресурсы перезаписываются при загрузке файлов локализации. Однако можно изменить <code>Culture</code>, чтобы загрузились ресурсы для определенного языка.</p>
			<p>В следующем примере показано изменение файла шаблона в обработчике события <code>PreLoad</code>.</p>
			<pre><code class="php">&lt;?php
require_once 'global.php';

class Index extends \Nemiro\UI\Page
{

  function PreLoad()
  {
    $this->Layout = '/example.html';
  }

}

\Nemiro\App::Magic();
?&gt;</code></pre>

			<h4 id="load">Load</h4>
			<p>Событие <code>Load</code> происходит перед формированием данных для вывода.</p>
			<p>В обработчике этого события можно изменить заголовок страницы, метатеги, список клиентских скриптов, содержимое блоков контента и определить значения свойствам пользовательских элементов управления.</p>
			<p>В следующем примере показано изменение заголовка страницы в обработчике события <code>Load</code> и добавление описания в метатеги страницы при помощи метода <code>SetDescription</code>.</p>
			<pre><code class="php">&lt;?php
require_once 'global.php';

class Index extends \Nemiro\UI\Page
{

  function Load()
  {
    $this->Title = 'Новый заголовок страницы';
    $this->SetDescription('Описание страницы.');
  }

}

\Nemiro\App::Magic();
?&gt;</code></pre>

			<h4 id="loadСomplete">LoadComplete</h4>
			<p>Событие <code>LoadComplete</code> происходит после формирования и вывода данных.</p>
			<p>В обработчике этого события ничего изменить нельзя сделать, это просто возможность зафиксировать процесс завершения создания страницы.</p>
			<pre><code class="php">&lt;?php
require_once 'global.php';

class Index extends \Nemiro\UI\Page
{

  function LoadComplete()
  {
    echo 'Страница сформирована!';
  }

}

\Nemiro\App::Magic();
?&gt;</code></pre>

			<h2 id="localization">Локализация</h2>
			<p>Для локализации страниц можно использовать локальные и глобальные ресурсы (<strong>global.json</strong>).</p>
			<p>Локальные ресурсы - это файлы с расширением <strong>.json</strong>, имеющие тоже название, что и основной файл страницы. В имени файла должна указываться культура (язык), для которой предназначены ресурсы.</p>
			<p>Например, для страницы <strong>index.php</strong> могут быть следующие файлы ресурсов: <strong>index.json</strong> - ресурсы по умолчанию, <strong>index.ru.json</strong> - ресурсы для русского языка, <strong>index.en.json</strong> - ресурсы для английского языка, <strong>index.de.json</strong> - ресурсы для немецкого языка и т.п.</p>
			<p>Действие локальных ресурсов распространяется и на шаблоны. Эту особенность можно использовать для создания статичных ресурсов заголовков страниц и/или метатегов.</p>
			<p><a href="localization.php-lang=ru.htm">Подробнее о механизмах локализации</a>.</p>
		
			<!--//-->
		</div>

		<!--Footer control-->
		<footer class="text-center small">
	<hr />
	<!--a class="github-button" href="https://github.com/alekseynemiro" data-style="mega" data-count-href="alekseynemiro/followers" data-count-api="/users/alekseynemiro#followers" data-count-aria-label="# followers on GitHub" aria-label="Follow @alekseynemiro on GitHub">Follow @alekseynemiro</a-->
	<a class="github-button" href="https://github.com/alekseynemiro/WebForms.PHP" data-icon="octicon-star" data-style="mega" data-count-href="alekseynemiro/WebForms.PHP/stargazers" data-count-api="/repos/alekseynemiro/WebForms.PHP#stargazers_count" data-count-aria-label="# stargazers on GitHub" aria-label="Star alekseynemiro/WebForms.PHP on GitHub">Star</a>
	<a class="github-button" href="https://github.com/alekseynemiro/WebForms.PHP/fork" data-icon="octicon-repo-forked" data-style="mega" data-count-href="alekseynemiro/WebForms.PHP/network" data-count-api="/repos/alekseynemiro/WebForms.PHP#forks_count" data-count-aria-label="# forks on GitHub" aria-label="Fork alekseynemiro/WebForms.PHP on GitHub">Fork</a>
	<a class="github-button" href="https://github.com/alekseynemiro/WebForms.PHP/archive/master.zip" data-icon="octicon-cloud-download" data-style="mega" aria-label="Download alekseynemiro/WebForms.PHP on GitHub">Download</a>
	<br /><br />
	Code licensed under <a rel="license" href="http://www.apache.org/licenses/LICENSE-2.0">Apache License 2.0</a>, documentation under <a rel="license" href="http://creativecommons.org/licenses/by-nc/4.0/">CC BY-NC 4.0</a><br />
	Copyright © Aleksey Nemiro, 2015. All rights reserved.
	<br /><br />
</footer>

<script async defer id="github-bjs" src="https://buttons.github.io/buttons.js"></script>

<script type="text/javascript">
	$(document).ready(function () {
		$('pre code').each(function (i, block) {
			hljs.highlightBlock(block);
		});
	});
</script>

<script type="text/javascript">
	(function (i, s, o, g, r, a, m) {
		i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
			(i[r].q = i[r].q || []).push(arguments)
		}, i[r].l = 1 * new Date(); a = s.createElement(o),
		m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
	})(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

	ga('create', 'UA-4793481-9', 'auto');
	ga('send', 'pageview');

</script>
		<!--//-->
	</body>
</html>