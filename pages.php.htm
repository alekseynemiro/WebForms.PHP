<!--registration controls-->


<!--//-->

<!DOCTYPE html>

<html>
  <head>
    <title>Pages - WebForms.PHP</title>
		<meta name="viewport" content="width=device-width" />
		<link rel="stylesheet" href="Content/css/compiled.min.css" />
		<script src="Scripts/compiled.min.js" type="text/javascript"></script>
		<!--block of content "Head"-->
		
		<!--//-->
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8" /><meta name="generator" content="PHP WebForms Engine by Aleksey Nemiro // v.3.1 // http://aleksey.nemiro.ru" /><meta name="DESCRIPTION" content="Template engine, HTML components and the beginnings of Framework for web sites creation in PHP." /><meta name="KEYWORDS" content="WebForms, PHP, Documentation, Manual, Guide, Demo" /><meta name="AUTHOR" content="Aleksey Nemiro (VVO-JOK-LED)" /><meta name="ROBOTS" content="ALL" /></head>
	<body>
		<!--Header control-->
		<header id="header">
	<nav class="navbar navbar-default"> <!-- navbar-fixed-top -->
		<div class="container">
			<div class="navbar-header">
				<button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#nav">
					<span class="icon-bar"></span>
					<span class="icon-bar"></span>
					<span class="icon-bar"></span>                        
				</button>
				<a href="index.htm" class="navbar-brand">WebForms.PHP</a>
			</div>
			<div id="nav" class="collapse navbar-collapse">
				<ul class="nav navbar-nav">
					<li><a href="index.htm#GettingStarted"><span class="glyphicon glyphicon-save"></span> Getting started</a></li>
					<li><a href="templates.php.htm"><span class="glyphicon glyphicon-picture"></span> Templates</a></li>
					<li><a href="pages.php.htm"><span class="glyphicon glyphicon-file"></span> Pages</a></li>
					<li><a href="controls.php.htm"><span class="glyphicon glyphicon-cog"></span> User Controls</a></li>
					<li><a href="elements.php.htm"><span class="glyphicon glyphicon-list-alt"></span> HTML Controls</a></li>
					<li><a href="localization.php.htm"><span class="glyphicon glyphicon-globe"></span> Localization</a></li>
				</ul>
				<ul class="nav navbar-nav navbar-right">
					<li><a href="pages.php-lang=ru.htm"><img src="Content/images/ru.png" alt="RU" title="" width="22" height="22" /></a></li>
					<li><a href="pages.php.htm"><img src="Content/images/en.png" alt="EN" title="" width="22" height="22" /></a></li>
				</ul>
			</div>
		</div>
	</nav>
		<div class="jumbotron"> <!-- style="padding-top:72px;" -->
		<div class="container">
			<h1>Pages</h1>
			<p>Pages are automatically merged with the templates and output the content blocks. The Page class is the basic element of the WebForms.PHP. Pages can contain custom properties, methods and event handlers.</p>
		</div>
	</div>
	</header>
		<!--//-->


		<div class="container">
			<!--block of content "MainContent"-->
						<h2>Introduction</h2>
			<p>To use the template engine files of pages to be processed <strong>PHP</strong> (as a rule, have the extension <strong>.php</strong>).</p>
			<p>Pages can be simple, consisting of one file with the <strong>HTML</strong> and <strong>PHP</strong> code.</p>
			<p>But to take full advantage of the engine will require the separation of code (<strong>HTML</strong> and <strong>PHP</strong>), at least two files. The main file should contain an object representation of the page - the class. In the second file - Page Layout (<strong>HTML</strong>).</p>
			<p>File with page layout should have the same name as the class file, but with the <strong>.html.php</strong> extension.</p>
			<p>In addition, each page can have the resources localization, which should be located in <strong>.json</strong> files.</p>

			<h3 id="contents">Contents</h3>
			<ul>
				<li><a href="#content">Content blocks</a></li>
				<li><a href="#simple">Simple pages</a></li>
				<li><a href="#html-php">Separation PHP and HTML</a></li>
				<li><a href="#only-php">Only PHP code</a></li>
				<li>
					<a href="#directives">Directives</a>
					<ul>
						<li><a href="#directive-page">Directive #Page</a></li>
						<li><a href="#directive-register">Directive #Register</a></li>
					</ul>
				</li>
				<li>
					<a href="#class-page">Class Page</a>
					<ul>
						<li><a href="#properties">Properties</a></li>
						<li>
							<a href="#events">Events</a>
							<ul>
								<li><a href="#preload">PreLoad</a></li>
								<li><a href="#load">Load</a></li>
								<li><a href="#loadÐ¡omplete">LoadComplete</a></li>
							</ul>
						</li>
					</ul>
				</li>
				<li><a href="#localization">Localization</a></li>
			</ul>

			<h2 id="content">Content blocks</h2>

			<p>Content for blocks of content must be placed in tags: <code>&lt;php:Content /&gt;</code>. Name of the block is specified in the parameter <code>ID</code>.</p>
			<pre><code class="html">&lt;php:Content ID="markerName"&gt;
  Contents of the block here.
  Acceptable use any tag, 
  server code and 
  user controls.
&lt;/php:Content&gt;</code></pre>
			<p>All that is outside of the <code>&lt;php:Content /&gt;</code> tags will be ignored.</p>
			<pre><code class="html">This text will be ignored becauseIt is located outside the &lt;php:Content /&gt; block.

&lt;php:Content ID="MainContent"&gt;
  This text will be output in the place &lt;php:MainContent/&gt;.
&lt;/php:Content&gt;

This text will be ignored becauseIt is located outside the &lt;php:Content /&gt; block.</code></pre>
			<p>You can specify blocks of content for non-existent markers in the template. Using this feature, you can dynamically change the template file and output on a single page output blocks that are defined only in the included template.</p>
			<p>The following example shows two templates. In the first defined block <code>&lt;php:MainContent/&gt;</code>, in the second two blocks : <code>&lt;php:MainContent/&gt;</code> and <code>&lt;php:RightPanel/&gt;</code>. The page is defined content for both blocks. When using the template <strong>Layout1.php</strong> client receives only the contents of the block <code>&lt;php:MainContent/&gt;</code> (see Result #1). When using template <strong>Layout2.php</strong>, the client will be given a specific content for both blocks (see Result #2).</p>
			<ul class="nav nav-tabs" role="tablist">
	<li class="active"><a href="#Page_TabControl1_Layout1" aria-controls="Page_TabControl1_Layout1" role="tab" data-toggle="tab">Template Layout1.php</a></li>
	<li class=""><a href="#Page_TabControl1_Layout2" aria-controls="Page_TabControl1_Layout2" role="tab" data-toggle="tab">Template Layout2.php</a></li>
	<li class=""><a href="#Page_TabControl1_Content" aria-controls="Page_TabControl1_Content" role="tab" data-toggle="tab">Content page</a></li>
	<li class=""><a href="#Page_TabControl1_Result1" aria-controls="Page_TabControl1_Result1" role="tab" data-toggle="tab">Result #1</a></li>
	<li class=""><a href="#Page_TabControl1_Result2" aria-controls="Page_TabControl1_Result2" role="tab" data-toggle="tab">Result #2</a></li>
</ul>

<div class="tab-content">
	<div role="tabpanel" class="tab-pane active" id="Page_TabControl1_Layout1">						<pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div class="container"&gt;
      &lt;php:MainContent/&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre>
					</div>
	<div role="tabpanel" class="tab-pane" id="Page_TabControl1_Layout2">						<pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div class="container"&gt;
      &lt;div class="col-md-10"&gt;
        &lt;php:MainContent/&gt;
      &lt;/div&gt;
      &lt;div class="col-md-2"&gt;
        &lt;php:RightPanel/&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre>
					</div>
	<div role="tabpanel" class="tab-pane" id="Page_TabControl1_Content">						<pre><code class="html">&lt;php:Content ID="MainContent"&gt;
  Content for MainContent.
&lt;/php:Content&gt;

&lt;php:Content ID="RightPanel"&gt;
  Content for RightPanel.  
&lt;/php:Content&gt;</code></pre>
					</div>
	<div role="tabpanel" class="tab-pane" id="Page_TabControl1_Result1">						<pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Default&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div class="container"&gt;
      Content for MainContent.
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre>
					</div>
	<div role="tabpanel" class="tab-pane" id="Page_TabControl1_Result2">						<pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Default&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div class="container"&gt;
      &lt;div class="col-md-10"&gt;
        Content for MainContent.
      &lt;/div&gt;
      &lt;div class="col-md-2"&gt;
         Content for RightPanel. 
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre>
					</div>
</div>
			<p>If on one page will be located several blocks with the same identifier, it will use the last block. It is not recommended, because it will affect the performance.</p>
			<pre><code class="html">&lt;php:Content ID="MainContent"&gt;
  This text will be processed, but will not be displayed, because below is a second block with identifier MainContent.
&lt;/php:Content&gt;

&lt;php:Content ID="MainContent"&gt;
  This text will display in place &lt;php:MainContent/&gt;.
&lt;/php:Content&gt;</code></pre>

			<h2 id="simple">Simple pages</h2>
			
			<p>Simple pages consist of a single file containing <strong>HTML</strong> code and blocks of content, and may also contain directives, user controls and any server-side code.</p>
			<p>Simple pages can be useful for output static content, when it is not require control the process of building a page on the server.</p>
			<p>To use the template engine, is necessary to include the file <strong>global.php</strong> to the page, and also call the the processing by command <code>App::Magic()</code>.</p>
			<pre><code class="php">&lt;?php 
require_once 'global.php';
\Nemiro\App::Magic();
?&gt;</code></pre>
			<p>The following example shows the implementation of a simple page that generates content for the <code>&lt;php:MainContent/&gt;</code>. The directive <code>#Page</code> contains a reference to the template file, and also title of the page (<code>&lt;title /&gt;</code>).</p>
			<pre><code class="html">&lt;?#Page Layout="~/Layouts/_Layout.php" Title="Simple page"?&gt;

&lt;php:Content ID="MainContent"&gt;
  &lt;h2&gt;Hello world!&lt;/h2&gt;
&lt;/php:Content&gt;

&lt;?php 
require_once 'global.php';
Nemiro\App::Magic();
?&gt;</code></pre>
			<p>Simple pages do not provide access to the object representation of the page and have limited functionality for managing templates and user controls.</p>
			
			<h2 id="html-php">Separation PHP and HTML</h2>

			<p>To use all the features, it is recommended to separate the <strong>HTML</strong> and <strong>PHP</strong>.</p>
			<p>In the main page file is created class. The class name must match the name of the page file (without extension). The markup must be in a file with the extension <strong>.html.php</strong>.</p>

			<p>For example, there is a page <strong>index.php</strong>:</p>
			<pre><code class="php">&lt;?php
require_once 'global.php';

class Index extends \Nemiro\UI\Page
{

}

\Nemiro\App::Magic();
?&gt;</code></pre>
			<p>The markup must be placed in the file <strong>index.html.php</strong>. The following example shows the possible contents of the <strong>index.html.php</strong>.</p>
			<pre><code class="html">&lt;php:Content ID="MainContent"&gt;
  &lt;h2&gt;Hello world!&lt;/h2&gt;
&lt;/php:Content&gt;</code></pre>
			<p>This model reduces the mixing of server and client code, and allows you to fully control the process of the page building.</p>
			<p>The class of page can contain any public properties and functions that can be used in the code markup through the keyword <code>$this</code>. For example, the base class <code>\Nemiro\UI\Page</code> has the <code>Title</code> property, which contains the title of the current page and can be outputed to the page as follows:</p>
			<pre><code class="html">&lt;php:Content ID="MainContent"&gt;
  &lt;h2&gt;Title: &lt;?=$this->Title?&gt;&lt;/h2&gt;
&lt;/php:Content&gt;</code></pre>
			<p><a href="#class-page">About Page class</a>.</p>
			
			<h2 id="only-php">Only PHP code</h2>
			<p>Allowed does not create files of markup. In this case, the page will only consist of the class, and blocks of content must be built programmatically.</p>
			<p>For example, the <strong>index.php</strong> file can have the following content.</p>
			<pre><code class="php">&lt;?php
require_once 'global.php';

class Index extends \Nemiro\UI\Page
{

  function Load()
  {
    $this->Title = 'The page without markup';
    $this->Content['MainContent'] = 'Any content for MainContent.';
  }

}

\Nemiro\App::Magic();
?&gt;</code></pre>
			<p>But this method is rarely used, since in most cases it is not convenient.</p>

			<h2 id="directives">Directives</h2>
			<h3 id="directive-page">Directive &lt;?#Page ?&gt;</h3>

			<p>Directive <code>&lt;?#Page ?&gt;</code> allows to override default parameters of the page initialization. (<strong>config.php</strong>).</p>
			<p>Directive located at the top of the <strong>HTML</strong> page, parameters are written in the style attribute of tags <strong>HTML/XML</strong>. For example: <code>&lt;?#Page Title="Page title" Layout="~/Layouts/_Layout.php" ?&gt;</code></p>
			<p>Supported parameters presented in the following table.</p>
			<table class="table">
				<thead>
					<tr>
						<th>Parameter</th>
						<th><nobr>Value type</nobr></th>
						<th>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>Layout</td>
						<td>String</td>
						<td>Contains the path to the template file to be used in the build of the page.</td>
					</tr>
					<tr>
						<td>Title</td>
						<td>String</td>
						<td>Contains html-page title (&lt;title&gt;&lt;/title&gt;).</td>
					</tr>
					<tr>
						<td>Optimized</td>
						<td>Boolean</td>
						<td>Enables optimization of the resulting html-code of the page.</td>
					</tr>
					<tr>
						<td>Cache</td>
						<td>Boolean</td>
						<td>Enables caching  of the page.</td>
					</tr>
					<tr>
						<td>Culture</td>
						<td>String</td>
						<td>Sets the culture (language) for the page. For example: ru, en.</td>
					</tr>
				</tbody>
			</table>
			<p>The following example illustrates the use of the <code>&lt;?#Page ?&gt;</code> for to set the title of the page and activation the optimization of <strong>HTML</strong>.</p>
			<pre><code class="html">&lt;?#Page Title="Title" Optimized="true" ?&gt;

&lt;php:Content ID="MainContent"&gt;
  Hello world!
&lt;/php:Content&gt;</code></pre>
			<p>The <code>&lt;?#Page ?&gt;</code> directive actual for a <a href="#simple">simple pages</a>.</p>

			<h3 id="directive-register">Directive &lt;?#Register ?&gt;</h3>

			<p>Directive <code>&lt;?#Register ?&gt;</code> allows to register the necessary <a href="controls.php.htm">user controls</a>.</p>
			<p>The <code>&lt;?#Register ?&gt;</code> accept four parameters, the list of which is presented in the following table.</p>
			<table class="table">
				<thead>
					<tr>
						<th>Parameter</th>
						<th><nobr>Value type</nobr></th>
						<th>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>Src</td>
						<td>String</td>
						<td><strong>Required.</strong> The path to the main file of the control.</td>
					</tr>
					<tr>
						<td>TagPrefix</td>
						<td>String</td>
						<td>
							<strong>Required.</strong> Prefix the name of the control that will be used when placing an instance of an element on the page.
						</td>
					</tr>
					<tr>
						<td>TagName</td>
						<td>String</td>
						<td>
							<strong>Required.</strong> Name of the control to be used when placing an instance of an element on the page.
						</td>
					</tr>
					<tr>
						<td>ClassName</td>
						<td>String</td>
						<td>
							<strong>Optional.</strong> Specifies the class name of the element. For example, user control file <strong>Message.php</strong>, the <strong>ClassName</strong> by default <code>Message</code>.
						</td>
					</tr>
				</tbody>
			</table>
			<p>The number <code>&lt;?#Register ?&gt;</code> directives on one page is not limited.</p>
			<p>The following example shows how to use the directive <code>&lt;?#Register ?&gt;</code> for registration on the page <a href="controls.php.htm">user controls</a> <code>Message</code> and <code>TabControl</code>, and their subsequent use.</p>
			<ul class="nav nav-tabs" role="tablist">
	<li class="active"><a href="#Page_TabControl2_Content" aria-controls="Page_TabControl2_Content" role="tab" data-toggle="tab">Content page</a></li>
	<li class=""><a href="#Page_TabControl2_Result" aria-controls="Page_TabControl2_Result" role="tab" data-toggle="tab">Result</a></li>
</ul>

<div class="tab-content">
	<div role="tabpanel" class="tab-pane active" id="Page_TabControl2_Content">						<pre><code class="html">&lt;?#Register Src="~/Controls/Message.php" TagPrefix="php" TagName="Message"?&gt;
&lt;?#Register Src="~/Controls/TabControl.php" TagPrefix="php" TagName="TabControl"?&gt;

&lt;php:Content ID="MainContent"&gt;
  Hello world!
  &lt;php:Message Type="success" Content="Success!" /&gt;
  &lt;php:TabControl&gt;
    &lt;php:Items&gt;
      &lt;php:TabItem Key="Tab1" Title="Attention"&gt;
        Controls TabControl and Message is not WebForms.PHP,
        the controls are made specifically for the demo site.
&lt;/php:TabItem&gt;
      &lt;php:TabItem Key="Tab2" Title="But..."&gt;
        If you wish, you can use these elements into your own projects, 
        just copy the files from the folder /Controls.
        Please note, Bootstrap3 is required.
      &lt;/php:TabItem&gt;
    &lt;/php:Items&gt;
  &lt;/php:TabControl&gt;
&lt;/php:Content&gt;</code></pre>
					</div>
	<div role="tabpanel" class="tab-pane" id="Page_TabControl2_Result">						<pre><code class="html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Default&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div class="container"&gt;
      &lt;!--Start MainContent--&gt;
        Hello world!

        &lt;!--Start Message--&gt;
        &lt;div class="alert alert-success"&gt;Success!&lt;/div&gt;
        &lt;!--End Message--&gt;

        &lt;!--Start TabControl--&gt;
        &lt;ul class="nav nav-tabs" role="tablist"&gt;
          &lt;li class="active"&gt;
            &lt;a href="#Page_TabControl1_Tab1" aria-controls="Page_TabControl1_Tab1" role="tab" data-toggle="tab" aria-expanded="false"&gt;
              Attention
            &lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href="#Page_TabControl1_Tab2" aria-controls="Page_TabControl1_Tab2" role="tab" data-toggle="tab" aria-expanded="true"&gt;
              But...
            &lt;/a&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
        &lt;div class="tab-content"&gt;
          &lt;div role="tabpanel" class="tab-pane" id="Page_TabControl1_Tab1"&gt;
            
        Controls TabControl and Message is not WebForms.PHP,
        the controls are made specifically for the demo site.

          &lt;/div&gt;
          &lt;div role="tabpanel" class="tab-pane" id="Page_TabControl1_Tab2"&gt;
            
        If you wish, you can use these elements into your own projects, 
        just copy the files from the folder /Controls.
        Please note, Bootstrap3 is required.
      
          &lt;/div&gt;
        &lt;/div&gt;
        &lt;!--End TabControl--&gt;
      &lt;!--End MainContent--&gt;
    &lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre>
					</div>
</div>

			<h2 id="class-page">Class Page</h2>

			<p>Class <code>\Nemiro\UI\Page</code> (hereinafter <code>Page</code>) - this basic class that is responsible for building a pages.</p>
			<p>From the <code>Page</code> class must be inherited (<code>extends</code>) classes of all pages.</p>
			<p>If a page has no class, it will use the default instance of the <code>Page</code>.</p>
			<p>The following code shows a variant of the page <code>Forum</code> class inheritance from the base class <code>Page</code>.</p>
			<pre><code class="php">&lt;?php
require_once 'global.php';

class Forum extends \Nemiro\UI\Page
{

}

\Nemiro\App::Magic();
?&gt;</code></pre>

			<h3 id="properties">Properties</h3>
			<p>The <code>Page</code> class has the following public properties.</p>
			<table class="table">
				<thead>
					<tr>
						<th>Property</th>
						<th><nobr>Value type</nobr></th>
						<th>Description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td>Optimized</td>
						<td>Boolean</td>
						<td>Gets or sets the mode to optimize the resulting html-code of the page.<br />Programmatically change the value of this property can be in the event handler <a href="#preload">PreLoad</a> Ð¸Ð»Ð¸ <a href="#load">Load</a>.</td>
					</tr>
					<tr>
						<td>Cache</td>
						<td>Boolean</td>
						<td>Gets or sets the cache mode of the page.<br />Programmatically change the value of this property can be in the event handler <a href="#preload">PreLoad</a>.</td>
					</tr>
					<tr>
						<td>Layout</td>
						<td>String</td>
						<td>Gets or sets the path to the template file.<br />Programmatically change the value of this property can be in the event handler <a href="#preload">PreLoad</a>.</td>
					</tr>
					<tr>
						<td>Encode</td>
						<td>String</td>
						<td>Gets or sets the page encoding.<br />Programmatically change the value of this property can be in the event handler <a href="#preload">PreLoad</a>.</td>
					</tr>
					<tr>
						<td>Culture</td>
						<td>String</td>
						<td>Gets or sets the code of culture (language) for the page. For example: ru, en.<br />Programmatically change the value of this property can be in the event handler <a href="#preload">PreLoad</a> or <a href="#load">Load</a>.</td>
					</tr>
					<tr>
						<td>Title</td>
						<td>String</td>
						<td>Gets or sets the page title (&lt;title&gt;&lt;/title&gt;).<br />Programmatically change the value of this property can be in the event handler <a href="#preload">PreLoad</a> or <a href="#load">Load</a>.</td>
					</tr>
					<tr>
						<td>Content</td>
						<td>Collection (key=value)</td>
						<td>Collection blocks of content of the page; where the key is a name (identifier) of the block, the value - is content.<br />Programmatically change the value of this property can be in the event handler <a href="#preload">PreLoad</a> or <a href="#load">Load</a>.<br />For example: <code>$this->Content['MainContent'] = 'Content for MainContent.';</code></td>
					</tr>
					<tr>
						<td>Meta</td>
						<td>Collection (key=value)</td>
						<td>Gets or sets the meta tags of the page.<br />Programmatically change the value of this property can be in the event handler <a href="#preload">PreLoad</a> or <a href="#load">Load</a>.<br />For example: <code>$this->Meta['DESCRIPTION'] = 'Page description.';</code>, output:<br /><code>&lt;meta name="DESCRIPTION" content="Page description." /&gt;</code>.<br />For keywods and description you can use <code>SetDescription</code> and <code>SetKeyWords</code> methods.<br />For example: <code>$this->SetDescription('Page description.');</code></td>
					</tr>
					<tr>
						<td>Scripts</td>
						<td>String Array</td>
						<td>An array of links to client scripts to be included in the page.<br />Programmatically change the value of this property can be in the event handler <a href="#preload">PreLoad</a> or <a href="#load">Load</a>.</td>
					</tr>
					<tr>
						<td>Controls</td>
						<td>Collection (key=value)</td>
						<td>Collection controls; where the key - control identifier (<code>ID</code>), value - control instance.<br />Programmatically change the value of this property can be in the event handler <a href="#load">Load</a>.<br />Note that through this collection can not get direct access to the control instance, it is only possible to determine the values of the properties of the elements that will be created during the building of the page. Also through this collection can not access the public methods of the control.</td>
					</tr>
					<tr>
						<td>Resources</td>
						<td>Collection (key=value)</td>
						<td>Collection of localization resources; where the key - the name of the resource, the value - localized string.<br />Programmatically change the value of this property can be in the event handler <a href="#load">Load</a>.</td>
					</tr>
				</tbody>
			</table>
			<p>All public properties are available for the descendant classes, ie classes of pages.</p>
			<div class="alert alert-warning">
	<span class="glyphicon glyphicon-warning-sign"></span> 	To avoid conflicts, the names of the custom properties should not overlap with the names of the properties of the base class.</div>

			<h3 id="events">Events</h3>
			<p>The <code>Page</code> class has three events that can be processed.</p>

			<h4 id="preload">PreLoad</h4>
			<p>The <code>PreLoad</code> event occurs after page initialization and before the start of the HTTP-headers output, loading template and resources.</p>
			<p>In the <code>PreLoad</code> event handler you can change the path to the template file and add a new <strong>HTTP</strong> headers.</p>
			<p>You can not control the resources localization in this event, but you can change the current culture.</p>
			<p>The following example shows how to change the link to the template file in the event <code>PreLoad</code> handler.</p>
			<pre><code class="php">&lt;?php
require_once 'global.php';

class Index extends \Nemiro\UI\Page
{

  function PreLoad()
  {
    $this->Layout = '/example.html';
  }

}

\Nemiro\App::Magic();
?&gt;</code></pre>

			<h4 id="load">Load</h4>
			<p>The <code>Load</code> event occurs before building data for output.</p>
			<p>In handler of this event, you can change the page title, meta tags, a list of client-side scripts, content and change values of the user controls properties.</p>
			<p>The following example shows how to change the page title and add a description of the page.</p>
			<pre><code class="php">&lt;?php
require_once 'global.php';

class Index extends \Nemiro\UI\Page
{

  function Load()
  {
    $this->Title = 'New title';
    $this->SetDescription('New description.');
  }

}

\Nemiro\App::Magic();
?&gt;</code></pre>

			<h4 id="loadÐ¡omplete">LoadComplete</h4>
			<p>The <code>LoadComplete</code> event occurs after data output.</p>
			<p>In handler of this event, you can be notified of the page creation.</p>
			<pre><code class="php">&lt;?php
require_once 'global.php';

class Index extends \Nemiro\UI\Page
{

  function LoadComplete()
  {
    echo 'The page is created and outputed!';
  }

}

\Nemiro\App::Magic();
?&gt;</code></pre>

			<h2 id="localization">Localization</h2>
			<p>For localization of pages can be be used local and global resources.</p>
			<p>Local Resources - a text file with the extension <strong>.json</strong>. The file names (without extensions) must contain the name of the main page file. The file names must contain the code of culture (language), for which resources is designed.</p>
			<p>For example, for page <strong>index.php</strong> may be the following resource files: <strong>index.json</strong> - the default resources, <strong>index.en.json</strong> - for English, <strong>index.ru.json</strong> - for Russain, <strong>index.de.json</strong> - for German etc.</p>
			<p>The scope of local resources also applies to templates and user controls.</p>
			<p><a href="localization.php.htm">Read more</a>.</p>
		
			<!--//-->
		</div>

		<!--Footer control-->
		<footer class="text-center small">
	<hr />
	<!--a class="github-button" href="https://github.com/alekseynemiro" data-style="mega" data-count-href="/alekseynemiro/followers" data-count-api="/users/alekseynemiro#followers" data-count-aria-label="# followers on GitHub" aria-label="Follow @alekseynemiro on GitHub">Follow @alekseynemiro</a-->
	<a class="github-button" href="https://github.com/alekseynemiro/WebForms.PHP" data-icon="octicon-star" data-style="mega" data-count-href="/alekseynemiro/WebForms.PHP/stargazers" data-count-api="/repos/alekseynemiro/WebForms.PHP#stargazers_count" data-count-aria-label="# stargazers on GitHub" aria-label="Star alekseynemiro/WebForms.PHP on GitHub">Star</a>
	<a class="github-button" href="https://github.com/alekseynemiro/WebForms.PHP/fork" data-icon="octicon-repo-forked" data-style="mega" data-count-href="/alekseynemiro/WebForms.PHP/network" data-count-api="/repos/alekseynemiro/WebForms.PHP#forks_count" data-count-aria-label="# forks on GitHub" aria-label="Fork alekseynemiro/WebForms.PHP on GitHub">Fork</a>
	<a class="github-button" href="https://github.com/alekseynemiro/WebForms.PHP/archive/master.zip" data-icon="octicon-cloud-download" data-style="mega" aria-label="Download alekseynemiro/WebForms.PHP on GitHub">Download</a>
	<br /><br />
	Code licensed under <a rel="license" href="http://www.apache.org/licenses/LICENSE-2.0">Apache License 2.0</a>, documentation under <a rel="license" href="http://creativecommons.org/licenses/by-nc/4.0/">CC BY-NC 4.0</a><br />
	Copyright Â© Aleksey Nemiro, 2015. All rights reserved.
	<br /><br />
</footer>

<script async defer id="github-bjs" src="https://buttons.github.io/buttons.js"></script>

<script type="text/javascript">
	$(document).ready(function () {
		$('pre code').each(function (i, block) {
			hljs.highlightBlock(block);
		});
	});
</script>

<script type="text/javascript">
	(function (i, s, o, g, r, a, m) {
		i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
			(i[r].q = i[r].q || []).push(arguments)
		}, i[r].l = 1 * new Date(); a = s.createElement(o),
		m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
	})(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

	ga('create', 'UA-4793481-9', 'auto');
	ga('send', 'pageview');

</script>
		<!--//-->
	</body>
</html>